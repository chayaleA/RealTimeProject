
RealTimeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb8  08006fb8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc0  08006fc0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  20000060  08007028  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08007028  00021c78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ede  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003896  00000000  00000000  00035faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da6  00000000  00000000  0003aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018998  00000000  00000000  0003b7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c2c  00000000  00000000  00054176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099adc  00000000  00000000  00069da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e28  00000000  00000000  00103880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001086a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08006f08 	.word	0x08006f08

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08006f08 	.word	0x08006f08

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2f>:
 800091c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000924:	bf24      	itt	cs
 8000926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800092a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800092e:	d90d      	bls.n	800094c <__aeabi_d2f+0x30>
 8000930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800093c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000944:	bf08      	it	eq
 8000946:	f020 0001 	biceq.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000950:	d121      	bne.n	8000996 <__aeabi_d2f+0x7a>
 8000952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000956:	bfbc      	itt	lt
 8000958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800095c:	4770      	bxlt	lr
 800095e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000962:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000966:	f1c2 0218 	rsb	r2, r2, #24
 800096a:	f1c2 0c20 	rsb	ip, r2, #32
 800096e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000972:	fa20 f002 	lsr.w	r0, r0, r2
 8000976:	bf18      	it	ne
 8000978:	f040 0001 	orrne.w	r0, r0, #1
 800097c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000984:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000988:	ea40 000c 	orr.w	r0, r0, ip
 800098c:	fa23 f302 	lsr.w	r3, r3, r2
 8000990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000994:	e7cc      	b.n	8000930 <__aeabi_d2f+0x14>
 8000996:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800099a:	d107      	bne.n	80009ac <__aeabi_d2f+0x90>
 800099c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009a0:	bf1e      	ittt	ne
 80009a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bxne	lr
 80009ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_frsub>:
 80009bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009c0:	e002      	b.n	80009c8 <__addsf3>
 80009c2:	bf00      	nop

080009c4 <__aeabi_fsub>:
 80009c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009c8 <__addsf3>:
 80009c8:	0042      	lsls	r2, r0, #1
 80009ca:	bf1f      	itttt	ne
 80009cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009d0:	ea92 0f03 	teqne	r2, r3
 80009d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009dc:	d06a      	beq.n	8000ab4 <__addsf3+0xec>
 80009de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009e6:	bfc1      	itttt	gt
 80009e8:	18d2      	addgt	r2, r2, r3
 80009ea:	4041      	eorgt	r1, r0
 80009ec:	4048      	eorgt	r0, r1
 80009ee:	4041      	eorgt	r1, r0
 80009f0:	bfb8      	it	lt
 80009f2:	425b      	neglt	r3, r3
 80009f4:	2b19      	cmp	r3, #25
 80009f6:	bf88      	it	hi
 80009f8:	4770      	bxhi	lr
 80009fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4240      	negne	r0, r0
 8000a0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4249      	negne	r1, r1
 8000a1a:	ea92 0f03 	teq	r2, r3
 8000a1e:	d03f      	beq.n	8000aa0 <__addsf3+0xd8>
 8000a20:	f1a2 0201 	sub.w	r2, r2, #1
 8000a24:	fa41 fc03 	asr.w	ip, r1, r3
 8000a28:	eb10 000c 	adds.w	r0, r0, ip
 8000a2c:	f1c3 0320 	rsb	r3, r3, #32
 8000a30:	fa01 f103 	lsl.w	r1, r1, r3
 8000a34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a38:	d502      	bpl.n	8000a40 <__addsf3+0x78>
 8000a3a:	4249      	negs	r1, r1
 8000a3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a44:	d313      	bcc.n	8000a6e <__addsf3+0xa6>
 8000a46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a4a:	d306      	bcc.n	8000a5a <__addsf3+0x92>
 8000a4c:	0840      	lsrs	r0, r0, #1
 8000a4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a52:	f102 0201 	add.w	r2, r2, #1
 8000a56:	2afe      	cmp	r2, #254	; 0xfe
 8000a58:	d251      	bcs.n	8000afe <__addsf3+0x136>
 8000a5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a62:	bf08      	it	eq
 8000a64:	f020 0001 	biceq.w	r0, r0, #1
 8000a68:	ea40 0003 	orr.w	r0, r0, r3
 8000a6c:	4770      	bx	lr
 8000a6e:	0049      	lsls	r1, r1, #1
 8000a70:	eb40 0000 	adc.w	r0, r0, r0
 8000a74:	3a01      	subs	r2, #1
 8000a76:	bf28      	it	cs
 8000a78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a7c:	d2ed      	bcs.n	8000a5a <__addsf3+0x92>
 8000a7e:	fab0 fc80 	clz	ip, r0
 8000a82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a86:	ebb2 020c 	subs.w	r2, r2, ip
 8000a8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a8e:	bfaa      	itet	ge
 8000a90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a94:	4252      	neglt	r2, r2
 8000a96:	4318      	orrge	r0, r3
 8000a98:	bfbc      	itt	lt
 8000a9a:	40d0      	lsrlt	r0, r2
 8000a9c:	4318      	orrlt	r0, r3
 8000a9e:	4770      	bx	lr
 8000aa0:	f092 0f00 	teq	r2, #0
 8000aa4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000aa8:	bf06      	itte	eq
 8000aaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aae:	3201      	addeq	r2, #1
 8000ab0:	3b01      	subne	r3, #1
 8000ab2:	e7b5      	b.n	8000a20 <__addsf3+0x58>
 8000ab4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000abc:	bf18      	it	ne
 8000abe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ac2:	d021      	beq.n	8000b08 <__addsf3+0x140>
 8000ac4:	ea92 0f03 	teq	r2, r3
 8000ac8:	d004      	beq.n	8000ad4 <__addsf3+0x10c>
 8000aca:	f092 0f00 	teq	r2, #0
 8000ace:	bf08      	it	eq
 8000ad0:	4608      	moveq	r0, r1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea90 0f01 	teq	r0, r1
 8000ad8:	bf1c      	itt	ne
 8000ada:	2000      	movne	r0, #0
 8000adc:	4770      	bxne	lr
 8000ade:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ae2:	d104      	bne.n	8000aee <__addsf3+0x126>
 8000ae4:	0040      	lsls	r0, r0, #1
 8000ae6:	bf28      	it	cs
 8000ae8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	4770      	bx	lr
 8000aee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000af2:	bf3c      	itt	cc
 8000af4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bxcc	lr
 8000afa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000afe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b06:	4770      	bx	lr
 8000b08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b0c:	bf16      	itet	ne
 8000b0e:	4608      	movne	r0, r1
 8000b10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b14:	4601      	movne	r1, r0
 8000b16:	0242      	lsls	r2, r0, #9
 8000b18:	bf06      	itte	eq
 8000b1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b1e:	ea90 0f01 	teqeq	r0, r1
 8000b22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_ui2f>:
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	e004      	b.n	8000b38 <__aeabi_i2f+0x8>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_i2f>:
 8000b30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	bf48      	it	mi
 8000b36:	4240      	negmi	r0, r0
 8000b38:	ea5f 0c00 	movs.w	ip, r0
 8000b3c:	bf08      	it	eq
 8000b3e:	4770      	bxeq	lr
 8000b40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b44:	4601      	mov	r1, r0
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	e01c      	b.n	8000b86 <__aeabi_l2f+0x2a>

08000b4c <__aeabi_ul2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e00a      	b.n	8000b70 <__aeabi_l2f+0x14>
 8000b5a:	bf00      	nop

08000b5c <__aeabi_l2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__aeabi_l2f+0x14>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	ea5f 0c01 	movs.w	ip, r1
 8000b74:	bf02      	ittt	eq
 8000b76:	4684      	moveq	ip, r0
 8000b78:	4601      	moveq	r1, r0
 8000b7a:	2000      	moveq	r0, #0
 8000b7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b80:	bf08      	it	eq
 8000b82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b8a:	fabc f28c 	clz	r2, ip
 8000b8e:	3a08      	subs	r2, #8
 8000b90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b94:	db10      	blt.n	8000bb8 <__aeabi_l2f+0x5c>
 8000b96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ba8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f102 0220 	add.w	r2, r2, #32
 8000bbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bd6:	4770      	bx	lr

08000bd8 <__gesf2>:
 8000bd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bdc:	e006      	b.n	8000bec <__cmpsf2+0x4>
 8000bde:	bf00      	nop

08000be0 <__lesf2>:
 8000be0:	f04f 0c01 	mov.w	ip, #1
 8000be4:	e002      	b.n	8000bec <__cmpsf2+0x4>
 8000be6:	bf00      	nop

08000be8 <__cmpsf2>:
 8000be8:	f04f 0c01 	mov.w	ip, #1
 8000bec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bf0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d011      	beq.n	8000c28 <__cmpsf2+0x40>
 8000c04:	b001      	add	sp, #4
 8000c06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c0a:	bf18      	it	ne
 8000c0c:	ea90 0f01 	teqne	r0, r1
 8000c10:	bf58      	it	pl
 8000c12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c16:	bf88      	it	hi
 8000c18:	17c8      	asrhi	r0, r1, #31
 8000c1a:	bf38      	it	cc
 8000c1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c20:	bf18      	it	ne
 8000c22:	f040 0001 	orrne.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	d102      	bne.n	8000c34 <__cmpsf2+0x4c>
 8000c2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c32:	d105      	bne.n	8000c40 <__cmpsf2+0x58>
 8000c34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c38:	d1e4      	bne.n	8000c04 <__cmpsf2+0x1c>
 8000c3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c3e:	d0e1      	beq.n	8000c04 <__cmpsf2+0x1c>
 8000c40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_cfrcmple>:
 8000c48:	4684      	mov	ip, r0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	4661      	mov	r1, ip
 8000c4e:	e7ff      	b.n	8000c50 <__aeabi_cfcmpeq>

08000c50 <__aeabi_cfcmpeq>:
 8000c50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c52:	f7ff ffc9 	bl	8000be8 <__cmpsf2>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	bf48      	it	mi
 8000c5a:	f110 0f00 	cmnmi.w	r0, #0
 8000c5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c60 <__aeabi_fcmpeq>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff fff4 	bl	8000c50 <__aeabi_cfcmpeq>
 8000c68:	bf0c      	ite	eq
 8000c6a:	2001      	moveq	r0, #1
 8000c6c:	2000      	movne	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmplt>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffea 	bl	8000c50 <__aeabi_cfcmpeq>
 8000c7c:	bf34      	ite	cc
 8000c7e:	2001      	movcc	r0, #1
 8000c80:	2000      	movcs	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmple>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffe0 	bl	8000c50 <__aeabi_cfcmpeq>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpge>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffd2 	bl	8000c48 <__aeabi_cfrcmple>
 8000ca4:	bf94      	ite	ls
 8000ca6:	2001      	movls	r0, #1
 8000ca8:	2000      	movhi	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fcmpgt>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff ffc8 	bl	8000c48 <__aeabi_cfrcmple>
 8000cb8:	bf34      	ite	cc
 8000cba:	2001      	movcc	r0, #1
 8000cbc:	2000      	movcs	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_uldivmod>:
 8000cc4:	b953      	cbnz	r3, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc6:	b94a      	cbnz	r2, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	bf08      	it	eq
 8000ccc:	2800      	cmpeq	r0, #0
 8000cce:	bf1c      	itt	ne
 8000cd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd8:	f000 b972 	b.w	8000fc0 <__aeabi_idiv0>
 8000cdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce4:	f000 f806 	bl	8000cf4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr

08000cf4 <__udivmoddi4>:
 8000cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf8:	9e08      	ldr	r6, [sp, #32]
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	468e      	mov	lr, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14c      	bne.n	8000d9e <__udivmoddi4+0xaa>
 8000d04:	428a      	cmp	r2, r1
 8000d06:	4694      	mov	ip, r2
 8000d08:	d967      	bls.n	8000dda <__udivmoddi4+0xe6>
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	b153      	cbz	r3, 8000d26 <__udivmoddi4+0x32>
 8000d10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d14:	f1c3 0220 	rsb	r2, r3, #32
 8000d18:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea42 0e0e 	orr.w	lr, r2, lr
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fbbe f1f7 	udiv	r1, lr, r7
 8000d2e:	fa1f f58c 	uxth.w	r5, ip
 8000d32:	fb07 ee11 	mls	lr, r7, r1, lr
 8000d36:	fb01 f005 	mul.w	r0, r1, r5
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x66>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 3eff 	add.w	lr, r1, #4294967295
 8000d4c:	f080 8119 	bcs.w	8000f82 <__udivmoddi4+0x28e>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8116 	bls.w	8000f82 <__udivmoddi4+0x28e>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d60:	fb07 2210 	mls	r2, r7, r0, r2
 8000d64:	fb00 f505 	mul.w	r5, r0, r5
 8000d68:	b2a4      	uxth	r4, r4
 8000d6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x94>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8104 	bcs.w	8000f86 <__udivmoddi4+0x292>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8101 	bls.w	8000f86 <__udivmoddi4+0x292>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	1b64      	subs	r4, r4, r5
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa6>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xc0>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ea 	beq.w	8000f7c <__udivmoddi4+0x288>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d148      	bne.n	8000e4e <__udivmoddi4+0x15a>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xd2>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2c2>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4696      	mov	lr, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa6>
 8000dd4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xea>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 808e 	bne.w	8000f04 <__udivmoddi4+0x210>
 8000de8:	1a88      	subs	r0, r1, r2
 8000dea:	2101      	movs	r1, #1
 8000dec:	0c17      	lsrs	r7, r2, #16
 8000dee:	fa1f fe82 	uxth.w	lr, r2
 8000df2:	fbb0 f5f7 	udiv	r5, r0, r7
 8000df6:	fb07 0015 	mls	r0, r7, r5, r0
 8000dfa:	0c22      	lsrs	r2, r4, #16
 8000dfc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e00:	fb0e f005 	mul.w	r0, lr, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x126>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x124>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f200 80cc 	bhi.w	8000fb0 <__udivmoddi4+0x2bc>
 8000e18:	4645      	mov	r5, r8
 8000e1a:	1a12      	subs	r2, r2, r0
 8000e1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e20:	fb07 2210 	mls	r2, r7, r0, r2
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x150>
 8000e32:	eb1c 0404 	adds.w	r4, ip, r4
 8000e36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14e>
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	f200 80b4 	bhi.w	8000faa <__udivmoddi4+0x2b6>
 8000e42:	4610      	mov	r0, r2
 8000e44:	eba4 040e 	sub.w	r4, r4, lr
 8000e48:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4c:	e7a0      	b.n	8000d90 <__udivmoddi4+0x9c>
 8000e4e:	f1c1 0720 	rsb	r7, r1, #32
 8000e52:	408b      	lsls	r3, r1
 8000e54:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e58:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000e60:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e64:	fbba f8f9 	udiv	r8, sl, r9
 8000e68:	408d      	lsls	r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	432b      	orrs	r3, r5
 8000e78:	fa00 f501 	lsl.w	r5, r0, r1
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	0c1c      	lsrs	r4, r3, #16
 8000e82:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000e86:	42a0      	cmp	r0, r4
 8000e88:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8c:	d90b      	bls.n	8000ea6 <__udivmoddi4+0x1b2>
 8000e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e92:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e96:	f080 8086 	bcs.w	8000fa6 <__udivmoddi4+0x2b2>
 8000e9a:	42a0      	cmp	r0, r4
 8000e9c:	f240 8083 	bls.w	8000fa6 <__udivmoddi4+0x2b2>
 8000ea0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	1a24      	subs	r4, r4, r0
 8000ea8:	b298      	uxth	r0, r3
 8000eaa:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eae:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb2:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eb6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x1dc>
 8000ebe:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec6:	d26a      	bcs.n	8000f9e <__udivmoddi4+0x2aa>
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d968      	bls.n	8000f9e <__udivmoddi4+0x2aa>
 8000ecc:	3b02      	subs	r3, #2
 8000ece:	4464      	add	r4, ip
 8000ed0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ed4:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed8:	eba4 040e 	sub.w	r4, r4, lr
 8000edc:	429c      	cmp	r4, r3
 8000ede:	46c8      	mov	r8, r9
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	d354      	bcc.n	8000f8e <__udivmoddi4+0x29a>
 8000ee4:	d051      	beq.n	8000f8a <__udivmoddi4+0x296>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	d067      	beq.n	8000fba <__udivmoddi4+0x2c6>
 8000eea:	ebb5 0308 	subs.w	r3, r5, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	40cb      	lsrs	r3, r1
 8000ef4:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef8:	431f      	orrs	r7, r3
 8000efa:	40cc      	lsrs	r4, r1
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	2100      	movs	r1, #0
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000f04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f08:	f1c3 0020 	rsb	r0, r3, #32
 8000f0c:	40c1      	lsrs	r1, r0
 8000f0e:	409d      	lsls	r5, r3
 8000f10:	fa24 f000 	lsr.w	r0, r4, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	4328      	orrs	r0, r5
 8000f1a:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1e:	fb07 1115 	mls	r1, r7, r5, r1
 8000f22:	fa1f fe8c 	uxth.w	lr, ip
 8000f26:	0c02      	lsrs	r2, r0, #16
 8000f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f30:	4291      	cmp	r1, r2
 8000f32:	fa04 f403 	lsl.w	r4, r4, r3
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x256>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d22f      	bcs.n	8000fa2 <__udivmoddi4+0x2ae>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d92d      	bls.n	8000fa2 <__udivmoddi4+0x2ae>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000f50:	fb07 2211 	mls	r2, r7, r1, r2
 8000f54:	b280      	uxth	r0, r0
 8000f56:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000f5a:	fb01 f20e 	mul.w	r2, r1, lr
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x280>
 8000f62:	eb1c 0000 	adds.w	r0, ip, r0
 8000f66:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f6a:	d216      	bcs.n	8000f9a <__udivmoddi4+0x2a6>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	d914      	bls.n	8000f9a <__udivmoddi4+0x2a6>
 8000f70:	3902      	subs	r1, #2
 8000f72:	4460      	add	r0, ip
 8000f74:	1a80      	subs	r0, r0, r2
 8000f76:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7a:	e73a      	b.n	8000df2 <__udivmoddi4+0xfe>
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e70b      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000f82:	4671      	mov	r1, lr
 8000f84:	e6e9      	b.n	8000d5a <__udivmoddi4+0x66>
 8000f86:	4610      	mov	r0, r2
 8000f88:	e6fe      	b.n	8000d88 <__udivmoddi4+0x94>
 8000f8a:	454d      	cmp	r5, r9
 8000f8c:	d2ab      	bcs.n	8000ee6 <__udivmoddi4+0x1f2>
 8000f8e:	ebb9 0802 	subs.w	r8, r9, r2
 8000f92:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7a5      	b.n	8000ee6 <__udivmoddi4+0x1f2>
 8000f9a:	4641      	mov	r1, r8
 8000f9c:	e7ea      	b.n	8000f74 <__udivmoddi4+0x280>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	e796      	b.n	8000ed0 <__udivmoddi4+0x1dc>
 8000fa2:	4645      	mov	r5, r8
 8000fa4:	e7d1      	b.n	8000f4a <__udivmoddi4+0x256>
 8000fa6:	46d0      	mov	r8, sl
 8000fa8:	e77d      	b.n	8000ea6 <__udivmoddi4+0x1b2>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e749      	b.n	8000e44 <__udivmoddi4+0x150>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e731      	b.n	8000e1a <__udivmoddi4+0x126>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xdc>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e6ed      	b.n	8000d9a <__udivmoddi4+0xa6>
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <init_distance_sensor>:
uint32_t pMillis;
uint32_t time_start = 0;
uint32_t time_end = 0;

Status_t init_distance_sensor(TIM_HandleTypeDef *timer)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(timer);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f002 fb95 	bl	80036fc <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <init_distance_sensor+0x24>)
 8000fda:	f001 fd72 	bl	8002ac2 <HAL_GPIO_WritePin>
	return xSUCCESS;//we need to implement
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	00000000 	.word	0x00000000

08000ff0 <read_distance>:

float read_distance(TIM_HandleTypeDef *sensorTimer)
{
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	4836      	ldr	r0, [pc, #216]	; (80010d8 <read_distance+0xe8>)
 8001000:	f001 fd5f 	bl	8002ac2 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(sensorTimer, 0);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(sensorTimer) < TIMER_GAP);
 800100c:	bf00      	nop
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	2b09      	cmp	r3, #9
 8001016:	d9fa      	bls.n	800100e <read_distance+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	482e      	ldr	r0, [pc, #184]	; (80010d8 <read_distance+0xe8>)
 8001020:	f001 fd4f 	bl	8002ac2 <HAL_GPIO_WritePin>

	pMillis=HAL_GetTick();
 8001024:	f000 fd46 	bl	8001ab4 <HAL_GetTick>
 8001028:	4603      	mov	r3, r0
 800102a:	4a2c      	ldr	r2, [pc, #176]	; (80010dc <read_distance+0xec>)
 800102c:	6013      	str	r3, [r2, #0]
	while(!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&&pMillis+TIMER_GAP>HAL_GetTick());
 800102e:	bf00      	nop
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <read_distance+0xe8>)
 8001036:	f001 fd2d 	bl	8002a94 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d108      	bne.n	8001052 <read_distance+0x62>
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <read_distance+0xec>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f103 040a 	add.w	r4, r3, #10
 8001048:	f000 fd34 	bl	8001ab4 <HAL_GetTick>
 800104c:	4603      	mov	r3, r0
 800104e:	429c      	cmp	r4, r3
 8001050:	d8ee      	bhi.n	8001030 <read_distance+0x40>
	time_start=__HAL_TIM_GET_COUNTER(sensorTimer);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <read_distance+0xf0>)
 800105a:	6013      	str	r3, [r2, #0]

	pMillis=HAL_GetTick();
 800105c:	f000 fd2a 	bl	8001ab4 <HAL_GetTick>
 8001060:	4603      	mov	r3, r0
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <read_distance+0xec>)
 8001064:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN))&&pMillis+50>HAL_GetTick());
 8001066:	bf00      	nop
 8001068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106c:	481a      	ldr	r0, [pc, #104]	; (80010d8 <read_distance+0xe8>)
 800106e:	f001 fd11 	bl	8002a94 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <read_distance+0x9a>
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <read_distance+0xec>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001080:	f000 fd18 	bl	8001ab4 <HAL_GetTick>
 8001084:	4603      	mov	r3, r0
 8001086:	429c      	cmp	r4, r3
 8001088:	d8ee      	bhi.n	8001068 <read_distance+0x78>
	time_end=__HAL_TIM_GET_COUNTER(sensorTimer);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <read_distance+0xf4>)
 8001092:	6013      	str	r3, [r2, #0]
	return (float)(time_end-time_start)*SPEED_OF_SOUND;
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <read_distance+0xf4>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <read_distance+0xf0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fd42 	bl	8000b28 <__aeabi_ui2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f9ce 	bl	8000448 <__aeabi_f2d>
 80010ac:	a308      	add	r3, pc, #32	; (adr r3, 80010d0 <read_distance+0xe0>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff fa21 	bl	80004f8 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fc2d 	bl	800091c <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	f3af 8000 	nop.w
 80010d0:	04816f00 	.word	0x04816f00
 80010d4:	3fa18fc5 	.word	0x3fa18fc5
 80010d8:	40020000 	.word	0x40020000
 80010dc:	20000080 	.word	0x20000080
 80010e0:	20000084 	.word	0x20000084
 80010e4:	20000088 	.word	0x20000088

080010e8 <task_periodic_measure_distance>:

void task_periodic_measure_distance(void *timer)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *sensorTimer = (TIM_HandleTypeDef*)timer;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		lock_dist_mutex();
 80010f4:	f000 fa5e 	bl	80015b4 <lock_dist_mutex>
		Distance=read_distance(sensorTimer);
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f7ff ff79 	bl	8000ff0 <read_distance>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a03      	ldr	r2, [pc, #12]	; (8001110 <task_periodic_measure_distance+0x28>)
 8001102:	6013      	str	r3, [r2, #0]
		unlock_dist_mutex();
 8001104:	f000 fa62 	bl	80015cc <unlock_dist_mutex>
		vTaskDelay(100);
 8001108:	2064      	movs	r0, #100	; 0x64
 800110a:	f004 f8bd 	bl	8005288 <vTaskDelay>
	{
 800110e:	e7f1      	b.n	80010f4 <task_periodic_measure_distance+0xc>
 8001110:	2000007c 	.word	0x2000007c

08001114 <led_on>:
void init_led()
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
}
void led_on()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	4802      	ldr	r0, [pc, #8]	; (8001128 <led_on+0x14>)
 8001120:	f001 fccf 	bl	8002ac2 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020000 	.word	0x40020000

0800112c <led_off>:
void led_off()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <led_off+0x14>)
 8001138:	f001 fcc3 	bl	8002ac2 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020000 	.word	0x40020000

08001144 <led_blink>:
void led_blink(uint32_t frequency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	int i=0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
	while(i<5)
 8001150:	e009      	b.n	8001166 <led_blink+0x22>
	{
		led_on();
 8001152:	f7ff ffdf 	bl	8001114 <led_on>
		HAL_Delay(frequency);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fcb6 	bl	8001ac8 <HAL_Delay>
		led_off();
 800115c:	f7ff ffe6 	bl	800112c <led_off>
		HAL_Delay(frequency);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fcb1 	bl	8001ac8 <HAL_Delay>
	while(i<5)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b04      	cmp	r3, #4
 800116a:	ddf2      	ble.n	8001152 <led_blink+0xe>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <task_alarm>:
void task_alarm()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	while(1)
	{
		if(Distance<10&&Temperature>20)
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <task_alarm+0x7c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	491d      	ldr	r1, [pc, #116]	; (80011f8 <task_alarm+0x80>)
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fd76 	bl	8000c74 <__aeabi_fcmplt>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00c      	beq.n	80011a8 <task_alarm+0x30>
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <task_alarm+0x84>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	491b      	ldr	r1, [pc, #108]	; (8001200 <task_alarm+0x88>)
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd8b 	bl	8000cb0 <__aeabi_fcmpgt>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <task_alarm+0x30>
				led=xOn;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <task_alarm+0x8c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
 80011a6:	e018      	b.n	80011da <task_alarm+0x62>
			else if(Distance>20&&Temperature<20)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <task_alarm+0x7c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4914      	ldr	r1, [pc, #80]	; (8001200 <task_alarm+0x88>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd7e 	bl	8000cb0 <__aeabi_fcmpgt>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00c      	beq.n	80011d4 <task_alarm+0x5c>
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <task_alarm+0x84>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4910      	ldr	r1, [pc, #64]	; (8001200 <task_alarm+0x88>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd57 	bl	8000c74 <__aeabi_fcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <task_alarm+0x5c>
				led=xOff;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <task_alarm+0x8c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e002      	b.n	80011da <task_alarm+0x62>
			else if(1)//Distance>10&&Temperature>30)
				led=xBlink;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <task_alarm+0x8c>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
		lock_led_mutex();
 80011da:	f000 fa05 	bl	80015e8 <lock_led_mutex>
		led_s=led;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <task_alarm+0x8c>)
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <task_alarm+0x90>)
 80011e4:	701a      	strb	r2, [r3, #0]
		unlock_led_mutex();
 80011e6:	f000 fa0b 	bl	8001600 <unlock_led_mutex>
		vTaskDelay(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f004 f84c 	bl	8005288 <vTaskDelay>
		if(Distance<10&&Temperature>20)
 80011f0:	e7c4      	b.n	800117c <task_alarm+0x4>
 80011f2:	bf00      	nop
 80011f4:	20000090 	.word	0x20000090
 80011f8:	41200000 	.word	0x41200000
 80011fc:	20000094 	.word	0x20000094
 8001200:	41a00000 	.word	0x41a00000
 8001204:	20000098 	.word	0x20000098
 8001208:	2000008c 	.word	0x2000008c

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fbeb 	bl	80019ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f82c 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 f91e 	bl	8001458 <MX_GPIO_Init>
  MX_TIM2_Init();
 800121c:	f000 f8d0 	bl	80013c0 <MX_TIM2_Init>
  MX_ADC_Init();
 8001220:	f000 f876 	bl	8001310 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  init_distance_sensor(&htim2);
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <main+0x50>)
 8001226:	f7ff fecd 	bl	8000fc4 <init_distance_sensor>
  init_temperature_sensor(&hadc);
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <main+0x54>)
 800122c:	f000 fb5c 	bl	80018e8 <init_temperature_sensor>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001230:	f002 fde2 	bl	8003df8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  init_mutex();
 8001234:	f000 f994 	bl	8001560 <init_mutex>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <main+0x58>)
 800123a:	2100      	movs	r1, #0
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <main+0x5c>)
 800123e:	f002 fe41 	bl	8003ec4 <osThreadNew>
 8001242:	4603      	mov	r3, r0
 8001244:	4a09      	ldr	r2, [pc, #36]	; (800126c <main+0x60>)
 8001246:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  create_tasks(&htim2,&hadc);
 8001248:	4905      	ldr	r1, [pc, #20]	; (8001260 <main+0x54>)
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <main+0x50>)
 800124c:	f000 fac2 	bl	80017d4 <create_tasks>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001250:	f002 fe04 	bl	8003e5c <osKernelStart>
 8001254:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000f0 	.word	0x200000f0
 8001260:	2000009c 	.word	0x2000009c
 8001264:	08006f78 	.word	0x08006f78
 8001268:	08001545 	.word	0x08001545
 800126c:	20000130 	.word	0x20000130

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b092      	sub	sp, #72	; 0x48
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2234      	movs	r2, #52	; 0x34
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fd5c 	bl	8006d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <SystemClock_Config+0x9c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <SystemClock_Config+0x9c>)
 800129c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80012a2:	2303      	movs	r3, #3
 80012a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ae:	2310      	movs	r3, #16
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80012bc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80012c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80012c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fc11 	bl	8002af4 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80012d8:	f000 f93c 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e0:	2303      	movs	r3, #3
 80012e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2101      	movs	r1, #1
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 ff2d 	bl	8003154 <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 f928 	bl	8001554 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3748      	adds	r7, #72	; 0x48
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40007000 	.word	0x40007000

08001310 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001322:	4a26      	ldr	r2, [pc, #152]	; (80013bc <MX_ADC_Init+0xac>)
 8001324:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_ADC_Init+0xa8>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_ADC_Init+0xa8>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_ADC_Init+0xa8>)
 800134c:	2200      	movs	r2, #0
 800134e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001360:	2201      	movs	r2, #1
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_ADC_Init+0xa8>)
 800136e:	2210      	movs	r2, #16
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_ADC_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_ADC_Init+0xa8>)
 8001382:	f000 fbc3 	bl	8001b0c <HAL_ADC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800138c:	f000 f8e2 	bl	8001554 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001394:	2301      	movs	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8001398:	2307      	movs	r3, #7
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_ADC_Init+0xa8>)
 80013a2:	f000 ff07 	bl	80021b4 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80013ac:	f000 f8d2 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000009c 	.word	0x2000009c
 80013bc:	40012400 	.word	0x40012400

080013c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM2_Init+0x94>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_TIM2_Init+0x94>)
 80013e6:	221f      	movs	r2, #31
 80013e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM2_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF - 1;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM2_Init+0x94>)
 80013f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM2_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM2_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_TIM2_Init+0x94>)
 8001406:	f002 f939 	bl	800367c <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001410:	f000 f8a0 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM2_Init+0x94>)
 8001422:	f002 fa91 	bl	8003948 <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 f892 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM2_Init+0x94>)
 800143e:	f002 fc7d 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 f884 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200000f0 	.word	0x200000f0

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <MX_GPIO_Init+0xe0>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a31      	ldr	r2, [pc, #196]	; (8001538 <MX_GPIO_Init+0xe0>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <MX_GPIO_Init+0xe0>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <MX_GPIO_Init+0xe0>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <MX_GPIO_Init+0xe0>)
 800148c:	f043 0320 	orr.w	r3, r3, #32
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <MX_GPIO_Init+0xe0>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 0320 	and.w	r3, r3, #32
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_GPIO_Init+0xe0>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a25      	ldr	r2, [pc, #148]	; (8001538 <MX_GPIO_Init+0xe0>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_GPIO_Init+0xe0>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_GPIO_Init+0xe0>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <MX_GPIO_Init+0xe0>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_GPIO_Init+0xe0>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <MX_GPIO_Init+0xe4>)
 80014d6:	f001 faf4 	bl	8002ac2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_GPIO_Init+0xe8>)
 80014f2:	f001 f93f 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80014f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <MX_GPIO_Init+0xe4>)
 8001510:	f001 f930 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_GPIO_Init+0xe4>)
 800152a:	f001 f923 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020800 	.word	0x40020800

08001544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f002 fd63 	bl	8004018 <osDelay>
 8001552:	e7fb      	b.n	800154c <StartDefaultTask+0x8>

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <init_mutex>:
 */

#include "mutex.h"

void init_mutex()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	tmprMutex = xSemaphoreCreateMutex();
 8001564:	2001      	movs	r0, #1
 8001566:	f002 ffc1 	bl	80044ec <xQueueCreateMutex>
 800156a:	4603      	mov	r3, r0
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <init_mutex+0x2c>)
 800156e:	6013      	str	r3, [r2, #0]
	distMutex = xSemaphoreCreateMutex();
 8001570:	2001      	movs	r0, #1
 8001572:	f002 ffbb 	bl	80044ec <xQueueCreateMutex>
 8001576:	4603      	mov	r3, r0
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <init_mutex+0x30>)
 800157a:	6013      	str	r3, [r2, #0]
	ledMutex = xSemaphoreCreateMutex();
 800157c:	2001      	movs	r0, #1
 800157e:	f002 ffb5 	bl	80044ec <xQueueCreateMutex>
 8001582:	4603      	mov	r3, r0
 8001584:	4a03      	ldr	r2, [pc, #12]	; (8001594 <init_mutex+0x34>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000134 	.word	0x20000134
 8001590:	20000138 	.word	0x20000138
 8001594:	2000013c 	.word	0x2000013c

08001598 <unlock_tmpr_mutex>:
void lock_tmpr_mutex()
{
	xSemaphoreTake(tmprMutex, MAX_DELAY);
}
void unlock_tmpr_mutex()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	xSemaphoreGive(tmprMutex);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <unlock_tmpr_mutex+0x18>)
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	f002 ffb9 	bl	800451c <xQueueGenericSend>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000134 	.word	0x20000134

080015b4 <lock_dist_mutex>:
void lock_dist_mutex()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	xSemaphoreTake(distMutex, MAX_DELAY);
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <lock_dist_mutex+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2164      	movs	r1, #100	; 0x64
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fa22 	bl	8004a08 <xQueueSemaphoreTake>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000138 	.word	0x20000138

080015cc <unlock_dist_mutex>:
void unlock_dist_mutex()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	xSemaphoreGive(distMutex);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <unlock_dist_mutex+0x18>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	f002 ff9f 	bl	800451c <xQueueGenericSend>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000138 	.word	0x20000138

080015e8 <lock_led_mutex>:
void lock_led_mutex()
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	xSemaphoreTake(ledMutex, MAX_DELAY);
 80015ec:	4b03      	ldr	r3, [pc, #12]	; (80015fc <lock_led_mutex+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2164      	movs	r1, #100	; 0x64
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fa08 	bl	8004a08 <xQueueSemaphoreTake>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000013c 	.word	0x2000013c

08001600 <unlock_led_mutex>:
void unlock_led_mutex()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	xSemaphoreGive(ledMutex);
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <unlock_led_mutex+0x18>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	f002 ff85 	bl	800451c <xQueueGenericSend>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000013c 	.word	0x2000013c

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_MspInit+0x64>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_MspInit+0x64>)
 8001628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800162c:	6253      	str	r3, [r2, #36]	; 0x24
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_MspInit+0x64>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_MspInit+0x64>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_MspInit+0x64>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6213      	str	r3, [r2, #32]
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_MspInit+0x64>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_MspInit+0x64>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_MspInit+0x64>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6253      	str	r3, [r2, #36]	; 0x24
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_MspInit+0x64>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	210f      	movs	r1, #15
 800166e:	f06f 0001 	mvn.w	r0, #1
 8001672:	f001 f848 	bl	8002706 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_ADC_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12b      	bne.n	80016fe <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_ADC_MspInit+0x88>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_ADC_MspInit+0x88>)
 80016ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_ADC_MspInit+0x88>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_ADC_MspInit+0x88>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_ADC_MspInit+0x88>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_ADC_MspInit+0x88>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <HAL_ADC_MspInit+0x8c>)
 80016ea:	f001 f843 	bl	8002774 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2105      	movs	r1, #5
 80016f2:	2012      	movs	r0, #18
 80016f4:	f001 f807 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80016f8:	2012      	movs	r0, #18
 80016fa:	f001 f820 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40012400 	.word	0x40012400
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d113      	bne.n	800174e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <HAL_TIM_Base_MspInit+0x44>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_TIM_Base_MspInit+0x44>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6253      	str	r3, [r2, #36]	; 0x24
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_TIM_Base_MspInit+0x44>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	201c      	movs	r0, #28
 8001744:	f000 ffdf 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001748:	201c      	movs	r0, #28
 800174a:	f000 fff8 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	e7fe      	b.n	8001760 <NMI_Handler+0x4>

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <MemManage_Handler+0x4>

0800176e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler+0x4>

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178a:	f000 f981 	bl	8001a90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800178e:	f004 fa11 	bl	8005bb4 <xTaskGetSchedulerState>
 8001792:	4603      	mov	r3, r0
 8001794:	2b01      	cmp	r3, #1
 8001796:	d001      	beq.n	800179c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001798:	f005 f876 	bl	8006888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <ADC1_IRQHandler+0x10>)
 80017a6:	f000 fbf3 	bl	8001f90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000009c 	.word	0x2000009c

080017b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM2_IRQHandler+0x10>)
 80017ba:	f001 ffe9 	bl	8003790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000f0 	.word	0x200000f0

080017c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <create_tasks>:

static TaskHandle_t * ReadDistanceTask;
static TaskHandle_t * MeasureTempTask;

void create_tasks(TIM_HandleTypeDef *timer, ADC_HandleTypeDef *adc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	create_read_distance_task(timer);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f80c 	bl	80017fc <create_read_distance_task>
	create_measure_temperature_task(adc);
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f000 f823 	bl	8001830 <create_measure_temperature_task>
	create_alarm_task();
 80017ea:	f000 f83b 	bl	8001864 <create_alarm_task>
	create_led_operate();
 80017ee:	f000 f867 	bl	80018c0 <create_led_operate>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <create_read_distance_task>:
void create_read_distance_task(TIM_HandleTypeDef *timer)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af02      	add	r7, sp, #8
 8001802:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_periodic_measure_distance, "Read Distance", MIN_QUEUE_DEPTH, timer, READ_DISTANCE_TASK_PRIORITY, ReadDistanceTask);
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <create_read_distance_task+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2308      	movs	r3, #8
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	220a      	movs	r2, #10
 8001812:	4905      	ldr	r1, [pc, #20]	; (8001828 <create_read_distance_task+0x2c>)
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <create_read_distance_task+0x30>)
 8001816:	f003 fbe3 	bl	8004fe0 <xTaskCreate>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000144 	.word	0x20000144
 8001828:	08006f2c 	.word	0x08006f2c
 800182c:	080010e9 	.word	0x080010e9

08001830 <create_measure_temperature_task>:
void create_measure_temperature_task(ADC_HandleTypeDef *adc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af02      	add	r7, sp, #8
 8001836:	6078      	str	r0, [r7, #4]
	xTaskCreate(task_measure_temperature, "Read Temp", MIN_QUEUE_DEPTH,	adc, MEASURE_TEMP_TASK_PRIORITY, MeasureTempTask);
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <create_measure_temperature_task+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	230a      	movs	r3, #10
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	220a      	movs	r2, #10
 8001846:	4905      	ldr	r1, [pc, #20]	; (800185c <create_measure_temperature_task+0x2c>)
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <create_measure_temperature_task+0x30>)
 800184a:	f003 fbc9 	bl	8004fe0 <xTaskCreate>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000148 	.word	0x20000148
 800185c:	08006f3c 	.word	0x08006f3c
 8001860:	08001971 	.word	0x08001971

08001864 <create_alarm_task>:
void create_alarm_task()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af02      	add	r7, sp, #8
	xTaskCreate(task_alarm,"Alarm Task",MIN_QUEUE_DEPTH,NULL,ALARM_TASK_PRIORITY,NULL);
 800186a:	2300      	movs	r3, #0
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	230c      	movs	r3, #12
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	2300      	movs	r3, #0
 8001874:	220a      	movs	r2, #10
 8001876:	4903      	ldr	r1, [pc, #12]	; (8001884 <create_alarm_task+0x20>)
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <create_alarm_task+0x24>)
 800187a:	f003 fbb1 	bl	8004fe0 <xTaskCreate>
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	08006f48 	.word	0x08006f48
 8001888:	08001179 	.word	0x08001179

0800188c <task_led_operate>:
void task_led_operate()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
//			{
//				case xOn:led_on();break;
//				case xOff:led_off();break;
//				case xBlink:led_blink(FREQUENCY);break;
//			}
		if(led_s==xOn)
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <task_led_operate+0x30>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <task_led_operate+0x12>
			led_on();
 8001898:	f7ff fc3c 	bl	8001114 <led_on>
 800189c:	e009      	b.n	80018b2 <task_led_operate+0x26>
		else if(led_s==xOff)
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <task_led_operate+0x30>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d102      	bne.n	80018ac <task_led_operate+0x20>
			led_off();
 80018a6:	f7ff fc41 	bl	800112c <led_off>
 80018aa:	e002      	b.n	80018b2 <task_led_operate+0x26>
		else
			led_blink(FREQUENCY);
 80018ac:	20c8      	movs	r0, #200	; 0xc8
 80018ae:	f7ff fc49 	bl	8001144 <led_blink>
		vTaskDelay(50);
 80018b2:	2032      	movs	r0, #50	; 0x32
 80018b4:	f003 fce8 	bl	8005288 <vTaskDelay>
		if(led_s==xOn)
 80018b8:	e7ea      	b.n	8001890 <task_led_operate+0x4>
 80018ba:	bf00      	nop
 80018bc:	20000140 	.word	0x20000140

080018c0 <create_led_operate>:

	}
}
void create_led_operate()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af02      	add	r7, sp, #8
	xTaskCreate(task_led_operate,"Led Operate",MIN_QUEUE_DEPTH,NULL,LED_OPERATE_PRIORITY,NULL);
 80018c6:	2300      	movs	r3, #0
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	230e      	movs	r3, #14
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2300      	movs	r3, #0
 80018d0:	220a      	movs	r2, #10
 80018d2:	4903      	ldr	r1, [pc, #12]	; (80018e0 <create_led_operate+0x20>)
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <create_led_operate+0x24>)
 80018d6:	f003 fb83 	bl	8004fe0 <xTaskCreate>
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08006f54 	.word	0x08006f54
 80018e4:	0800188d 	.word	0x0800188d

080018e8 <init_temperature_sensor>:

uint16_t adc_value=0;


Status_t init_temperature_sensor(ADC_HandleTypeDef *adc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fa51 	bl	8001d98 <HAL_ADC_Start>
	return xSUCCESS;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <read_temperature>:

float read_temperature(ADC_HandleTypeDef *adc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	int x = HAL_ADC_PollForConversion(adc, 1000);
 8001908:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 faa3 	bl	8001e58 <HAL_ADC_PollForConversion>
 8001912:	4603      	mov	r3, r0
 8001914:	60fb      	str	r3, [r7, #12]
	adc_value = HAL_ADC_GetValue(adc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fb2e 	bl	8001f78 <HAL_ADC_GetValue>
 800191c:	4603      	mov	r3, r0
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <read_temperature+0x68>)
 8001922:	801a      	strh	r2, [r3, #0]
	return adc_value*(VOLT_SUPPLY/ANALOG_RANGE)/MILIVOLT_PER_DEGREE;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <read_temperature+0x68>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fd7b 	bl	8000424 <__aeabi_i2d>
 800192e:	a30c      	add	r3, pc, #48	; (adr r3, 8001960 <read_temperature+0x60>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fde0 	bl	80004f8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <read_temperature+0x6c>)
 8001946:	f7fe ff01 	bl	800074c <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7fe ffe3 	bl	800091c <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00000000 	.word	0x00000000
 8001964:	3fe9c800 	.word	0x3fe9c800
 8001968:	20000150 	.word	0x20000150
 800196c:	40240000 	.word	0x40240000

08001970 <task_measure_temperature>:

void task_measure_temperature(void *adc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef *pADC = (ADC_HandleTypeDef*)adc;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		unlock_tmpr_mutex();
 800197c:	f7ff fe0c 	bl	8001598 <unlock_tmpr_mutex>
		Temperature = read_temperature(pADC);
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff ffbd 	bl	8001900 <read_temperature>
 8001986:	4603      	mov	r3, r0
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <task_measure_temperature+0x2c>)
 800198a:	6013      	str	r3, [r2, #0]
		unlock_tmpr_mutex();
 800198c:	f7ff fe04 	bl	8001598 <unlock_tmpr_mutex>
		vTaskDelay(1000);
 8001990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001994:	f003 fc78 	bl	8005288 <vTaskDelay>
	{
 8001998:	e7f0      	b.n	800197c <task_measure_temperature+0xc>
 800199a:	bf00      	nop
 800199c:	2000014c 	.word	0x2000014c

080019a0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a0:	f7ff ff12 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019a6:	490c      	ldr	r1, [pc, #48]	; (80019d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019bc:	4c09      	ldr	r4, [pc, #36]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ca:	f005 fa15 	bl	8006df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ce:	f7ff fc1d 	bl	800120c <main>
  bx lr
 80019d2:	4770      	bx	lr
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80019dc:	08006fc8 	.word	0x08006fc8
  ldr r2, =_sbss
 80019e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019e4:	20001c78 	.word	0x20001c78

080019e8 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <COMP_ACQ_IRQHandler>

080019ea <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 fe7b 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fa:	200f      	movs	r0, #15
 80019fc:	f000 f80e 	bl	8001a1c <HAL_InitTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e001      	b.n	8001a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a0c:	f7ff fe06 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a10:	79fb      	ldrb	r3, [r7, #7]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_InitTick+0x68>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d022      	beq.n	8001a76 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_InitTick+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 fe88 	bl	800275a <HAL_SYSTICK_Config>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10f      	bne.n	8001a70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d809      	bhi.n	8001a6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a56:	2200      	movs	r2, #0
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5e:	f000 fe52 	bl	8002706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_InitTick+0x70>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e004      	b.n	8001a7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_IncTick+0x1c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_IncTick+0x1c>)
 8001aa0:	6013      	str	r3, [r2, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000154 	.word	0x20000154
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000154 	.word	0x20000154

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d004      	beq.n	8001aec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_Delay+0x40>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aec:	bf00      	nop
 8001aee:	f7ff ffe1 	bl	8001ab4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d8f7      	bhi.n	8001aee <HAL_Delay+0x26>
  {
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000008 	.word	0x20000008

08001b0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	; 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e127      	b.n	8001d7c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4b8e      	ldr	r3, [pc, #568]	; (8001d84 <HAL_ADC_Init+0x278>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a8d      	ldr	r2, [pc, #564]	; (8001d84 <HAL_ADC_Init+0x278>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_ADC_Init+0x278>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fd8f 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 80ff 	bne.w	8001d72 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b7c:	f023 0302 	bic.w	r3, r3, #2
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001b88:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <HAL_ADC_Init+0x27c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	497c      	ldr	r1, [pc, #496]	; (8001d88 <HAL_ADC_Init+0x27c>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ba2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	4619      	mov	r1, r3
 8001bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001bc6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bcc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001bee:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d007      	beq.n	8001c0e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c06:	4313      	orrs	r3, r2
 8001c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d04f      	beq.n	8001cbc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	4313      	orrs	r3, r2
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c2e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6912      	ldr	r2, [r2, #16]
 8001c34:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c38:	d003      	beq.n	8001c42 <HAL_ADC_Init+0x136>
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6912      	ldr	r2, [r2, #16]
 8001c3e:	2a01      	cmp	r2, #1
 8001c40:	d102      	bne.n	8001c48 <HAL_ADC_Init+0x13c>
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c46:	e000      	b.n	8001c4a <HAL_ADC_Init+0x13e>
 8001c48:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c4a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d125      	bne.n	8001ca8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d114      	bne.n	8001c90 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001c70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	fa92 f2a2 	rbit	r2, r2
 8001c78:	617a      	str	r2, [r7, #20]
  return result;
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8e:	e00b      	b.n	8001ca8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4b37      	ldr	r3, [pc, #220]	; (8001d8c <HAL_ADC_Init+0x280>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <HAL_ADC_Init+0x284>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d003      	beq.n	8001ce2 <HAL_ADC_Init+0x1d6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d119      	bne.n	8001d16 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001cf6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	60fa      	str	r2, [r7, #12]
  return result;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	fab2 f282 	clz	r2, r2
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	fa03 f202 	lsl.w	r2, r3, r2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001d24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_ADC_Init+0x288>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d10b      	bne.n	8001d4e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f023 0303 	bic.w	r3, r3, #3
 8001d44:	f043 0201 	orr.w	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d4c:	e014      	b.n	8001d78 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	f023 0312 	bic.w	r3, r3, #18
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d70:	e002      	b.n	8001d78 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3738      	adds	r7, #56	; 0x38
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40012700 	.word	0x40012700
 8001d8c:	fcfc16ff 	.word	0xfcfc16ff
 8001d90:	c0fff189 	.word	0xc0fff189
 8001d94:	bf80fffe 	.word	0xbf80fffe

08001d98 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Start+0x1a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e04e      	b.n	8001e50 <HAL_ADC_Start+0xb8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fb66 	bl	800248c <ADC_Enable>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d141      	bne.n	8001e4e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e2e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e4c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	d113      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e84:	d10b      	bne.n	8001e9e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e068      	b.n	8001f70 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e9e:	f7ff fe09 	bl	8001ab4 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ea4:	e021      	b.n	8001eea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d01d      	beq.n	8001eea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_ADC_PollForConversion+0x6c>
 8001eb4:	f7ff fdfe 	bl	8001ab4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d212      	bcs.n	8001eea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f043 0204 	orr.w	r2, r3, #4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e042      	b.n	8001f70 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0d6      	beq.n	8001ea6 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0212 	mvn.w	r2, #18
 8001f08:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d124      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11f      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d111      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d04c      	beq.n	800204c <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d047      	beq.n	800204c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d12c      	bne.n	800203c <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d127      	bne.n	800203c <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002004:	2b00      	cmp	r3, #0
 8002006:	d119      	bne.n	800203c <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0220 	bic.w	r2, r2, #32
 8002016:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f89e 	bl	800217e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f06f 0212 	mvn.w	r2, #18
 800204a:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d05a      	beq.n	800210c <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d055      	beq.n	800210c <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002070:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d13a      	bne.n	80020fc <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d12c      	bne.n	80020fc <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d125      	bne.n	80020fc <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11e      	bne.n	80020fc <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d119      	bne.n	80020fc <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fa21 	bl	8002544 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f06f 020c 	mvn.w	r2, #12
 800210a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f82f 	bl	8002190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0201 	mvn.w	r2, #1
 800213a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d017      	beq.n	8002176 <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002154:	f043 0202 	orr.w	r2, r3, #2
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0220 	mvn.w	r2, #32
 8002164:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f81b 	bl	80021a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0220 	mvn.w	r2, #32
 8002174:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x20>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e14f      	b.n	8002474 <HAL_ADC_ConfigChannel+0x2c0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d81c      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b05      	subs	r3, #5
 80021f6:	221f      	movs	r2, #31
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	4019      	ands	r1, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b05      	subs	r3, #5
 8002210:	fa00 f203 	lsl.w	r2, r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
 800221c:	e07e      	b.n	800231c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d81c      	bhi.n	8002260 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	3b23      	subs	r3, #35	; 0x23
 8002238:	221f      	movs	r2, #31
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	4019      	ands	r1, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b23      	subs	r3, #35	; 0x23
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c
 800225e:	e05d      	b.n	800231c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b12      	cmp	r3, #18
 8002266:	d81c      	bhi.n	80022a2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b41      	subs	r3, #65	; 0x41
 800227a:	221f      	movs	r2, #31
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	4019      	ands	r1, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3b41      	subs	r3, #65	; 0x41
 8002294:	fa00 f203 	lsl.w	r2, r0, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
 80022a0:	e03c      	b.n	800231c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b18      	cmp	r3, #24
 80022a8:	d81c      	bhi.n	80022e4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	3b5f      	subs	r3, #95	; 0x5f
 80022bc:	221f      	movs	r2, #31
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	4019      	ands	r1, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	3b5f      	subs	r3, #95	; 0x5f
 80022d6:	fa00 f203 	lsl.w	r2, r0, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	635a      	str	r2, [r3, #52]	; 0x34
 80022e2:	e01b      	b.n	800231c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	3b7d      	subs	r3, #125	; 0x7d
 80022f6:	221f      	movs	r2, #31
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4019      	ands	r1, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	3b7d      	subs	r3, #125	; 0x7d
 8002310:	fa00 f203 	lsl.w	r2, r0, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d81a      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	2207      	movs	r2, #7
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	4019      	ands	r1, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6898      	ldr	r0, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	e05d      	b.n	8002416 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b13      	cmp	r3, #19
 8002360:	d81c      	bhi.n	800239c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	3b1e      	subs	r3, #30
 8002374:	2207      	movs	r2, #7
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	4019      	ands	r1, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6898      	ldr	r0, [r3, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	fa00 f203 	lsl.w	r2, r0, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	e03c      	b.n	8002416 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b1d      	cmp	r3, #29
 80023a2:	d81c      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d9      	ldr	r1, [r3, #12]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	3b3c      	subs	r3, #60	; 0x3c
 80023b6:	2207      	movs	r2, #7
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	4019      	ands	r1, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6898      	ldr	r0, [r3, #8]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b3c      	subs	r3, #60	; 0x3c
 80023d0:	fa00 f203 	lsl.w	r2, r0, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	e01b      	b.n	8002416 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	3b5a      	subs	r3, #90	; 0x5a
 80023f0:	2207      	movs	r2, #7
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	4019      	ands	r1, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6898      	ldr	r0, [r3, #8]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	3b5a      	subs	r3, #90	; 0x5a
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d003      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002422:	2b11      	cmp	r3, #17
 8002424:	d121      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_ADC_ConfigChannel+0x2cc>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d11b      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_ADC_ConfigChannel+0x2cc>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_ADC_ConfigChannel+0x2cc>)
 8002438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800243c:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d111      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_ADC_ConfigChannel+0x2d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_ADC_ConfigChannel+0x2d4>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	0c9a      	lsrs	r2, r3, #18
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800245c:	e002      	b.n	8002464 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	3b01      	subs	r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f9      	bne.n	800245e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40012700 	.word	0x40012700
 8002484:	20000000 	.word	0x20000000
 8002488:	431bde83 	.word	0x431bde83

0800248c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d043      	beq.n	8002532 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <ADC_Enable+0xb0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <ADC_Enable+0xb4>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9a      	lsrs	r2, r3, #18
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80024ce:	e002      	b.n	80024d6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80024dc:	f7ff faea 	bl	8001ab4 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024e2:	e01f      	b.n	8002524 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80024e4:	f7ff fae6 	bl	8001ab4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d918      	bls.n	8002524 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d011      	beq.n	8002524 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e007      	b.n	8002534 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d1d8      	bne.n	80024e4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	431bde83 	.word	0x431bde83

08002544 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
	...

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <__NVIC_EnableIRQ+0x34>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff90 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff2d 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff42 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff90 	bl	8002648 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5f 	bl	80025f4 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff35 	bl	80025bc <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800278a:	e160      	b.n	8002a4e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2101      	movs	r1, #1
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8152 	beq.w	8002a48 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d005      	beq.n	80027bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d130      	bne.n	800281e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f003 0201 	and.w	r2, r3, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b03      	cmp	r3, #3
 8002828:	d017      	beq.n	800285a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d123      	bne.n	80028ae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	08da      	lsrs	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3208      	adds	r2, #8
 800286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002872:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	6939      	ldr	r1, [r7, #16]
 80028aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0203 	and.w	r2, r3, #3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80ac 	beq.w	8002a48 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_GPIO_Init+0x2f8>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <HAL_GPIO_Init+0x2f8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <HAL_GPIO_Init+0x2f8>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002908:	4a59      	ldr	r2, [pc, #356]	; (8002a70 <HAL_GPIO_Init+0x2fc>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <HAL_GPIO_Init+0x300>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d025      	beq.n	8002980 <HAL_GPIO_Init+0x20c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a50      	ldr	r2, [pc, #320]	; (8002a78 <HAL_GPIO_Init+0x304>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01f      	beq.n	800297c <HAL_GPIO_Init+0x208>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a4f      	ldr	r2, [pc, #316]	; (8002a7c <HAL_GPIO_Init+0x308>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d019      	beq.n	8002978 <HAL_GPIO_Init+0x204>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_GPIO_Init+0x30c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_GPIO_Init+0x200>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a4d      	ldr	r2, [pc, #308]	; (8002a84 <HAL_GPIO_Init+0x310>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00d      	beq.n	8002970 <HAL_GPIO_Init+0x1fc>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a4c      	ldr	r2, [pc, #304]	; (8002a88 <HAL_GPIO_Init+0x314>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <HAL_GPIO_Init+0x1f8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_GPIO_Init+0x318>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_GPIO_Init+0x1f4>
 8002964:	2306      	movs	r3, #6
 8002966:	e00c      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 8002968:	2307      	movs	r3, #7
 800296a:	e00a      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 800296c:	2305      	movs	r3, #5
 800296e:	e008      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 8002970:	2304      	movs	r3, #4
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 8002974:	2303      	movs	r3, #3
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x20e>
 8002980:	2300      	movs	r3, #0
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002992:	4937      	ldr	r1, [pc, #220]	; (8002a70 <HAL_GPIO_Init+0x2fc>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029c4:	4a32      	ldr	r2, [pc, #200]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a18:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1e:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_GPIO_Init+0x31c>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f ae97 	bne.w	800278c <HAL_GPIO_Init+0x18>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40021400 	.word	0x40021400
 8002a8c:	40021800 	.word	0x40021800
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	e001      	b.n	8002ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad2:	787b      	ldrb	r3, [r7, #1]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad8:	887a      	ldrh	r2, [r7, #2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ade:	e003      	b.n	8002ae8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	041a      	lsls	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e31d      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4b94      	ldr	r3, [pc, #592]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b10:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d07b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d006      	beq.n	8002b3a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d10f      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3a:	4b87      	ldr	r3, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d06a      	beq.n	8002c1c <HAL_RCC_OscConfig+0x128>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d166      	bne.n	8002c1c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e2f7      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d106      	bne.n	8002b68 <HAL_RCC_OscConfig+0x74>
 8002b5a:	4b7f      	ldr	r3, [pc, #508]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7e      	ldr	r2, [pc, #504]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e02d      	b.n	8002bc4 <HAL_RCC_OscConfig+0xd0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x96>
 8002b70:	4b79      	ldr	r3, [pc, #484]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a78      	ldr	r2, [pc, #480]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCC_OscConfig+0xd0>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0xb8>
 8002b92:	4b71      	ldr	r3, [pc, #452]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a70      	ldr	r2, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b6e      	ldr	r3, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6d      	ldr	r2, [pc, #436]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xd0>
 8002bac:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a69      	ldr	r2, [pc, #420]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe ff72 	bl	8001ab4 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe ff6e 	bl	8001ab4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e2ad      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xe0>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe ff5e 	bl	8001ab4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe ff5a 	bl	8001ab4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e299      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x108>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d05a      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d119      	bne.n	8002c6a <HAL_RCC_OscConfig+0x176>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d116      	bne.n	8002c6a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x160>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e276      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	493d      	ldr	r1, [pc, #244]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c68:	e03a      	b.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d020      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c72:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_RCC_OscConfig+0x268>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe ff1c 	bl	8001ab4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fe ff18 	bl	8001ab4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e257      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	021b      	lsls	r3, r3, #8
 8002cac:	492a      	ldr	r1, [pc, #168]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]
 8002cb2:	e015      	b.n	8002ce0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb4:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_RCC_OscConfig+0x268>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fefb 	bl	8001ab4 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fef7 	bl	8001ab4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e236      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80b8 	beq.w	8002e5e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d170      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_OscConfig+0x218>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e21a      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d921      	bls.n	8002d60 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fc4b 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e208      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	4901      	ldr	r1, [pc, #4]	; (8002d58 <HAL_RCC_OscConfig+0x264>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 8002d56:	e020      	b.n	8002d9a <HAL_RCC_OscConfig+0x2a6>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d60:	4b99      	ldr	r3, [pc, #612]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4996      	ldr	r1, [pc, #600]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d72:	4b95      	ldr	r3, [pc, #596]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	061b      	lsls	r3, r3, #24
 8002d80:	4991      	ldr	r1, [pc, #580]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fc16 	bl	80035bc <RCC_SetFlashLatencyFromMSIRange>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e1d3      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	0b5b      	lsrs	r3, r3, #13
 8002da0:	3301      	adds	r3, #1
 8002da2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002daa:	4a87      	ldr	r2, [pc, #540]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	0912      	lsrs	r2, r2, #4
 8002db0:	f002 020f 	and.w	r2, r2, #15
 8002db4:	4985      	ldr	r1, [pc, #532]	; (8002fcc <HAL_RCC_OscConfig+0x4d8>)
 8002db6:	5c8a      	ldrb	r2, [r1, r2]
 8002db8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002dba:	4a85      	ldr	r2, [pc, #532]	; (8002fd0 <HAL_RCC_OscConfig+0x4dc>)
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dbe:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <HAL_RCC_OscConfig+0x4e0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fe2a 	bl	8001a1c <HAL_InitTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d045      	beq.n	8002e5e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	e1b5      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d029      	beq.n	8002e32 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dde:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <HAL_RCC_OscConfig+0x4e4>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fe66 	bl	8001ab4 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dec:	f7fe fe62 	bl	8001ab4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1a1      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dfe:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0a:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	496c      	ldr	r1, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1c:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4967      	ldr	r1, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e32:	4b69      	ldr	r3, [pc, #420]	; (8002fd8 <HAL_RCC_OscConfig+0x4e4>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe fe3c 	bl	8001ab4 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7fe fe38 	bl	8001ab4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e177      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d030      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b5a      	ldr	r3, [pc, #360]	; (8002fdc <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7fe fe1c 	bl	8001ab4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fe18 	bl	8001ab4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e157      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e92:	4b4d      	ldr	r3, [pc, #308]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x38c>
 8002e9e:	e015      	b.n	8002ecc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b4e      	ldr	r3, [pc, #312]	; (8002fdc <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fe05 	bl	8001ab4 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe fe01 	bl	8001ab4 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e140      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec0:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b5 	beq.w	8003044 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	4a36      	ldr	r2, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a32      	ldr	r2, [pc, #200]	; (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fdc9 	bl	8001ab4 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe fdc5 	bl	8001ab4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e104      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x466>
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6353      	str	r3, [r2, #52]	; 0x34
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x488>
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6c:	6353      	str	r3, [r2, #52]	; 0x34
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f78:	6353      	str	r3, [r2, #52]	; 0x34
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x4aa>
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	4a0f      	ldr	r2, [pc, #60]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f8e:	6353      	str	r3, [r2, #52]	; 0x34
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa8:	6353      	str	r3, [r2, #52]	; 0x34
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d024      	beq.n	8003008 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fd79 	bl	8001ab4 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc4:	e019      	b.n	8002ffa <HAL_RCC_OscConfig+0x506>
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08006fa8 	.word	0x08006fa8
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004
 8002fd8:	42470020 	.word	0x42470020
 8002fdc:	42470680 	.word	0x42470680
 8002fe0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fd66 	bl	8001ab4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0a3      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_RCC_OscConfig+0x658>)
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x4f0>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fe fd54 	bl	8001ab4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fd50 	bl	8001ab4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e08d      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003026:	4b49      	ldr	r3, [pc, #292]	; (800314c <HAL_RCC_OscConfig+0x658>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003032:	7ffb      	ldrb	r3, [r7, #31]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b44      	ldr	r3, [pc, #272]	; (800314c <HAL_RCC_OscConfig+0x658>)
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <HAL_RCC_OscConfig+0x658>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d079      	beq.n	8003140 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d056      	beq.n	8003100 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b02      	cmp	r3, #2
 8003058:	d13b      	bne.n	80030d2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_RCC_OscConfig+0x65c>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fd28 	bl	8001ab4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fd24 	bl	8001ab4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e063      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_OscConfig+0x658>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_RCC_OscConfig+0x658>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	4319      	orrs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	430b      	orrs	r3, r1
 800309e:	492b      	ldr	r1, [pc, #172]	; (800314c <HAL_RCC_OscConfig+0x658>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <HAL_RCC_OscConfig+0x65c>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fd03 	bl	8001ab4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe fcff 	bl	8001ab4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e03e      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_OscConfig+0x658>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x5be>
 80030d0:	e036      	b.n	8003140 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HAL_RCC_OscConfig+0x65c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fcec 	bl	8001ab4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fce8 	bl	8001ab4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e027      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f2:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_RCC_OscConfig+0x658>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x5ec>
 80030fe:	e01f      	b.n	8003140 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e01a      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_RCC_OscConfig+0x658>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	429a      	cmp	r2, r3
 800311e:	d10d      	bne.n	800313c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d106      	bne.n	800313c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	42470060 	.word	0x42470060

08003154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e11a      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b8f      	ldr	r3, [pc, #572]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d919      	bls.n	80031aa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_ClockConfig+0x34>
 800317c:	4b8a      	ldr	r3, [pc, #552]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a89      	ldr	r2, [pc, #548]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b87      	ldr	r3, [pc, #540]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 0201 	bic.w	r2, r3, #1
 8003190:	4985      	ldr	r1, [pc, #532]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003198:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0f9      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d008      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b6:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	497a      	ldr	r1, [pc, #488]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 808e 	beq.w	80032f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031de:	4b73      	ldr	r3, [pc, #460]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d121      	bne.n	800322e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0d7      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031f6:	4b6d      	ldr	r3, [pc, #436]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0cb      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0bf      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0b7      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	495c      	ldr	r1, [pc, #368]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe fc38 	bl	8001ab4 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d112      	bne.n	8003274 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe fc30 	bl	8001ab4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e09b      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003266:	4b51      	ldr	r3, [pc, #324]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b08      	cmp	r3, #8
 8003270:	d1ee      	bne.n	8003250 <HAL_RCC_ClockConfig+0xfc>
 8003272:	e03e      	b.n	80032f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d112      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327e:	f7fe fc19 	bl	8001ab4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e084      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b45      	ldr	r3, [pc, #276]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_ClockConfig+0x12a>
 80032a0:	e027      	b.n	80032f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d11d      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fe fc02 	bl	8001ab4 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e06d      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d1ee      	bne.n	80032ac <HAL_RCC_ClockConfig+0x158>
 80032ce:	e010      	b.n	80032f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f7fe fbf0 	bl	8001ab4 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e05b      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ee      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d219      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <HAL_RCC_ClockConfig+0x1be>
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0201 	bic.w	r2, r3, #1
 800331a:	4923      	ldr	r1, [pc, #140]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_RCC_ClockConfig+0x254>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e034      	b.n	800339e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4917      	ldr	r1, [pc, #92]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490f      	ldr	r1, [pc, #60]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f823 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_RCC_ClockConfig+0x258>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490b      	ldr	r1, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x264>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fb42 	bl	8001a1c <HAL_InitTick>
 8003398:	4603      	mov	r3, r0
 800339a:	72fb      	strb	r3, [r7, #11]

  return status;
 800339c:	7afb      	ldrb	r3, [r7, #11]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40023c00 	.word	0x40023c00
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08006fa8 	.word	0x08006fa8
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000004 	.word	0x20000004

080033bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b092      	sub	sp, #72	; 0x48
 80033c2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d00d      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x34>
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	f200 80d5 	bhi.w	8003584 <HAL_RCC_GetSysClockFreq+0x1c8>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x2e>
 80033e2:	e0cf      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b72      	ldr	r3, [pc, #456]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80033e8:	e0da      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ea:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80033ec:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80033ee:	e0d7      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80033f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f2:	0c9b      	lsrs	r3, r3, #18
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80033fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003400:	0d9b      	lsrs	r3, r3, #22
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340a:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d05d      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2200      	movs	r2, #0
 800341a:	4618      	mov	r0, r3
 800341c:	4611      	mov	r1, r2
 800341e:	4604      	mov	r4, r0
 8003420:	460d      	mov	r5, r1
 8003422:	4622      	mov	r2, r4
 8003424:	462b      	mov	r3, r5
 8003426:	f04f 0000 	mov.w	r0, #0
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	0159      	lsls	r1, r3, #5
 8003430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003434:	0150      	lsls	r0, r2, #5
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4621      	mov	r1, r4
 800343c:	1a51      	subs	r1, r2, r1
 800343e:	6139      	str	r1, [r7, #16]
 8003440:	4629      	mov	r1, r5
 8003442:	eb63 0301 	sbc.w	r3, r3, r1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003454:	4659      	mov	r1, fp
 8003456:	018b      	lsls	r3, r1, #6
 8003458:	4651      	mov	r1, sl
 800345a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345e:	4651      	mov	r1, sl
 8003460:	018a      	lsls	r2, r1, #6
 8003462:	46d4      	mov	ip, sl
 8003464:	ebb2 080c 	subs.w	r8, r2, ip
 8003468:	4659      	mov	r1, fp
 800346a:	eb63 0901 	sbc.w	r9, r3, r1
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003482:	4690      	mov	r8, r2
 8003484:	4699      	mov	r9, r3
 8003486:	4623      	mov	r3, r4
 8003488:	eb18 0303 	adds.w	r3, r8, r3
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	462b      	mov	r3, r5
 8003490:	eb49 0303 	adc.w	r3, r9, r3
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034a2:	4629      	mov	r1, r5
 80034a4:	024b      	lsls	r3, r1, #9
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	4604      	mov	r4, r0
 80034ac:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80034b0:	4601      	mov	r1, r0
 80034b2:	024a      	lsls	r2, r1, #9
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	2200      	movs	r2, #0
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034c4:	f7fd fbfe 	bl	8000cc4 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	647b      	str	r3, [r7, #68]	; 0x44
 80034d0:	e055      	b.n	800357e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d4:	2200      	movs	r2, #0
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	627a      	str	r2, [r7, #36]	; 0x24
 80034da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034de:	4642      	mov	r2, r8
 80034e0:	464b      	mov	r3, r9
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	46c4      	mov	ip, r8
 80034f8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80034fc:	4640      	mov	r0, r8
 80034fe:	4649      	mov	r1, r9
 8003500:	468c      	mov	ip, r1
 8003502:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003512:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003516:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800351a:	ebb2 040a 	subs.w	r4, r2, sl
 800351e:	eb63 050b 	sbc.w	r5, r3, fp
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	00eb      	lsls	r3, r5, #3
 800352c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003530:	00e2      	lsls	r2, r4, #3
 8003532:	4614      	mov	r4, r2
 8003534:	461d      	mov	r5, r3
 8003536:	4603      	mov	r3, r0
 8003538:	18e3      	adds	r3, r4, r3
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	460b      	mov	r3, r1
 800353e:	eb45 0303 	adc.w	r3, r5, r3
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003550:	4629      	mov	r1, r5
 8003552:	028b      	lsls	r3, r1, #10
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	4604      	mov	r4, r0
 800355a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800355e:	4601      	mov	r1, r0
 8003560:	028a      	lsls	r2, r1, #10
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003568:	2200      	movs	r2, #0
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	61fa      	str	r2, [r7, #28]
 800356e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003572:	f7fd fba7 	bl	8000cc4 <__aeabi_uldivmod>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4613      	mov	r3, r2
 800357c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800357e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003582:	e00d      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0b5b      	lsrs	r3, r3, #13
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003592:	3301      	adds	r3, #1
 8003594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800359e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3748      	adds	r7, #72	; 0x48
 80035a6:	46bd      	mov	sp, r7
 80035a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200
 80035b8:	08006f9c 	.word	0x08006f9c

080035bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d12c      	bne.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035d4:	4b26      	ldr	r3, [pc, #152]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e016      	b.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6253      	str	r3, [r2, #36]	; 0x24
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800360c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003618:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003620:	d105      	bne.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003628:	d101      	bne.n	800362e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800362a:	2301      	movs	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 0201 	bic.w	r2, r3, #1
 8003648:	490b      	ldr	r1, [pc, #44]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000
 8003678:	40023c00 	.word	0x40023c00

0800367c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e031      	b.n	80036f2 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe f836 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f000 fa38 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d00e      	beq.n	8003744 <HAL_TIM_Base_Start+0x48>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_TIM_Base_Start+0x88>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d009      	beq.n	8003744 <HAL_TIM_Base_Start+0x48>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_TIM_Base_Start+0x8c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <HAL_TIM_Base_Start+0x48>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a13      	ldr	r2, [pc, #76]	; (800378c <HAL_TIM_Base_Start+0x90>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d111      	bne.n	8003768 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b06      	cmp	r3, #6
 8003754:	d010      	beq.n	8003778 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0201 	orr.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003766:	e007      	b.n	8003778 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40010800 	.word	0x40010800

08003790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0202 	mvn.w	r2, #2
 80037bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f991 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f984 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f993 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d122      	bne.n	8003840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d11b      	bne.n	8003840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0204 	mvn.w	r2, #4
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f967 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f95a 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f969 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b08      	cmp	r3, #8
 800384c:	d122      	bne.n	8003894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b08      	cmp	r3, #8
 800385a:	d11b      	bne.n	8003894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0208 	mvn.w	r2, #8
 8003864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2204      	movs	r2, #4
 800386a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f93d 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 8003880:	e005      	b.n	800388e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f930 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f93f 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d122      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d11b      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2208      	movs	r2, #8
 80038be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f913 	bl	8003afa <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f906 	bl	8003ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f915 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d10e      	bne.n	8003914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0201 	mvn.w	r2, #1
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8e1 	bl	8003ad6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d10e      	bne.n	8003940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d107      	bne.n	8003940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8ef 	bl	8003b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIM_ConfigClockSource+0x1c>
 8003960:	2302      	movs	r3, #2
 8003962:	e0b4      	b.n	8003ace <HAL_TIM_ConfigClockSource+0x186>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d03e      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0xd4>
 800399e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a2:	f200 8087 	bhi.w	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	f000 8086 	beq.w	8003aba <HAL_TIM_ConfigClockSource+0x172>
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d87f      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b70      	cmp	r3, #112	; 0x70
 80039b6:	d01a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0xa6>
 80039b8:	2b70      	cmp	r3, #112	; 0x70
 80039ba:	d87b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b60      	cmp	r3, #96	; 0x60
 80039be:	d050      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0x11a>
 80039c0:	2b60      	cmp	r3, #96	; 0x60
 80039c2:	d877      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b50      	cmp	r3, #80	; 0x50
 80039c6:	d03c      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xfa>
 80039c8:	2b50      	cmp	r3, #80	; 0x50
 80039ca:	d873      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d058      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x13a>
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d86f      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b30      	cmp	r3, #48	; 0x30
 80039d6:	d064      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039d8:	2b30      	cmp	r3, #48	; 0x30
 80039da:	d86b      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d060      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d867      	bhi.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d05c      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d05a      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80039ec:	e062      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	f000 f97e 	bl	8003cfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	609a      	str	r2, [r3, #8]
      break;
 8003a1a:	e04f      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	f000 f967 	bl	8003cfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3e:	609a      	str	r2, [r3, #8]
      break;
 8003a40:	e03c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f000 f8de 	bl	8003c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2150      	movs	r1, #80	; 0x50
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f935 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a60:	e02c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 f8fc 	bl	8003c6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2160      	movs	r1, #96	; 0x60
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f925 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a80:	e01c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 f8be 	bl	8003c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2140      	movs	r1, #64	; 0x40
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f915 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e00c      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f000 f90c 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003ab2:	e003      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d00f      	beq.n	8003b68 <TIM_Base_SetConfig+0x38>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	; (8003bf8 <TIM_Base_SetConfig+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a2a      	ldr	r2, [pc, #168]	; (8003bfc <TIM_Base_SetConfig+0xcc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a29      	ldr	r2, [pc, #164]	; (8003c00 <TIM_Base_SetConfig+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0x38>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a28      	ldr	r2, [pc, #160]	; (8003c04 <TIM_Base_SetConfig+0xd4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d017      	beq.n	8003bb2 <TIM_Base_SetConfig+0x82>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <TIM_Base_SetConfig+0xc8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <TIM_Base_SetConfig+0x82>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <TIM_Base_SetConfig+0xcc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00f      	beq.n	8003bb2 <TIM_Base_SetConfig+0x82>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <TIM_Base_SetConfig+0xd0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <TIM_Base_SetConfig+0x82>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <TIM_Base_SetConfig+0xd4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <TIM_Base_SetConfig+0x82>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <TIM_Base_SetConfig+0xd8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_Base_SetConfig+0x82>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <TIM_Base_SetConfig+0xdc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	615a      	str	r2, [r3, #20]
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40010800 	.word	0x40010800
 8003c08:	40010c00 	.word	0x40010c00
 8003c0c:	40011000 	.word	0x40011000

08003c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 030a 	bic.w	r3, r3, #10
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0210 	bic.w	r2, r3, #16
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	031b      	lsls	r3, r3, #12
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	621a      	str	r2, [r3, #32]
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f043 0307 	orr.w	r3, r3, #7
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	021a      	lsls	r2, r3, #8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	609a      	str	r2, [r3, #8]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e046      	b.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d00e      	beq.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10c      	bne.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40010800 	.word	0x40010800

08003df8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dfe:	f3ef 8305 	mrs	r3, IPSR
 8003e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <osKernelInitialize+0x32>
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <osKernelInitialize+0x60>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d109      	bne.n	8003e32 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e22:	603b      	str	r3, [r7, #0]
  return(result);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e2a:	f06f 0305 	mvn.w	r3, #5
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e00c      	b.n	8003e4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <osKernelInitialize+0x60>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d105      	bne.n	8003e46 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <osKernelInitialize+0x60>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e002      	b.n	8003e4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	20000158 	.word	0x20000158

08003e5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e62:	f3ef 8305 	mrs	r3, IPSR
 8003e66:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e72:	607b      	str	r3, [r7, #4]
  return(result);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <osKernelStart+0x32>
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <osKernelStart+0x64>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d109      	bne.n	8003e96 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e82:	f3ef 8311 	mrs	r3, BASEPRI
 8003e86:	603b      	str	r3, [r7, #0]
  return(result);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e8e:	f06f 0305 	mvn.w	r3, #5
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e00e      	b.n	8003eb4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e96:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <osKernelStart+0x64>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d107      	bne.n	8003eae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <osKernelStart+0x64>)
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003ea4:	f001 fa24 	bl	80052f0 <vTaskStartScheduler>
      stat = osOK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e002      	b.n	8003eb4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000158 	.word	0x20000158

08003ec4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b092      	sub	sp, #72	; 0x48
 8003ec8:	af04      	add	r7, sp, #16
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed4:	f3ef 8305 	mrs	r3, IPSR
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 8094 	bne.w	800400a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 808d 	bne.w	800400a <osThreadNew+0x146>
 8003ef0:	4b48      	ldr	r3, [pc, #288]	; (8004014 <osThreadNew+0x150>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d106      	bne.n	8003f06 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8003efc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 8082 	bne.w	800400a <osThreadNew+0x146>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d07e      	beq.n	800400a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003f10:	2318      	movs	r3, #24
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003f14:	2300      	movs	r3, #0
 8003f16:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003f18:	f107 031b 	add.w	r3, r7, #27
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d045      	beq.n	8003fb6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <osThreadNew+0x74>
        name = attr->name;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <osThreadNew+0x9a>
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b38      	cmp	r3, #56	; 0x38
 8003f50:	d805      	bhi.n	8003f5e <osThreadNew+0x9a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <osThreadNew+0x9e>
        return (NULL);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e054      	b.n	800400c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00e      	beq.n	8003f98 <osThreadNew+0xd4>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2ba7      	cmp	r3, #167	; 0xa7
 8003f80:	d90a      	bls.n	8003f98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <osThreadNew+0xd4>
        mem = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f96:	e010      	b.n	8003fba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10c      	bne.n	8003fba <osThreadNew+0xf6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d108      	bne.n	8003fba <osThreadNew+0xf6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <osThreadNew+0xf6>
          mem = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb4:	e001      	b.n	8003fba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d110      	bne.n	8003fe2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fc8:	9202      	str	r2, [sp, #8]
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 ffa6 	bl	8004f28 <xTaskCreateStatic>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e013      	b.n	800400a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d110      	bne.n	800400a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fff0 	bl	8004fe0 <xTaskCreate>
 8004000:	4603      	mov	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d001      	beq.n	800400a <osThreadNew+0x146>
          hTask = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800400a:	697b      	ldr	r3, [r7, #20]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3738      	adds	r7, #56	; 0x38
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000158 	.word	0x20000158

08004018 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004020:	f3ef 8305 	mrs	r3, IPSR
 8004024:	613b      	str	r3, [r7, #16]
  return(result);
 8004026:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10f      	bne.n	800404c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402c:	f3ef 8310 	mrs	r3, PRIMASK
 8004030:	60fb      	str	r3, [r7, #12]
  return(result);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <osDelay+0x34>
 8004038:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <osDelay+0x58>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d109      	bne.n	8004054 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004040:	f3ef 8311 	mrs	r3, BASEPRI
 8004044:	60bb      	str	r3, [r7, #8]
  return(result);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <osDelay+0x3c>
    stat = osErrorISR;
 800404c:	f06f 0305 	mvn.w	r3, #5
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e007      	b.n	8004064 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <osDelay+0x4c>
      vTaskDelay(ticks);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f001 f912 	bl	8005288 <vTaskDelay>
    }
  }

  return (stat);
 8004064:	697b      	ldr	r3, [r7, #20]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000158 	.word	0x20000158

08004074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a06      	ldr	r2, [pc, #24]	; (800409c <vApplicationGetIdleTaskMemory+0x28>)
 8004084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800408a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	601a      	str	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	2000015c 	.word	0x2000015c
 80040a0:	20000204 	.word	0x20000204

080040a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80040b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4a06      	ldr	r2, [pc, #24]	; (80040d4 <vApplicationGetTimerTaskMemory+0x30>)
 80040ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000404 	.word	0x20000404
 80040d4:	200004ac 	.word	0x200004ac

080040d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f103 0208 	add.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 0208 	add.w	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f103 0208 	add.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d103      	bne.n	8004194 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e00c      	b.n	80041ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3308      	adds	r3, #8
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e002      	b.n	80041a2 <vListInsert+0x2e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d2f6      	bcs.n	800419c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6892      	ldr	r2, [r2, #8]
 80041fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6852      	ldr	r2, [r2, #4]
 8004204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d103      	bne.n	8004218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
	...

08004238 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004262:	f002 fa93 	bl	800678c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	441a      	add	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	3b01      	subs	r3, #1
 8004294:	68f9      	ldr	r1, [r7, #12]
 8004296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d114      	bne.n	80042e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01a      	beq.n	80042f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3310      	adds	r3, #16
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 faaf 	bl	8005828 <xTaskRemoveFromEventList>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <xQueueGenericReset+0xcc>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	e009      	b.n	80042f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3310      	adds	r3, #16
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fef6 	bl	80040d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3324      	adds	r3, #36	; 0x24
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fef1 	bl	80040d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042f6:	f002 fa79 	bl	80067ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042fa:	2301      	movs	r3, #1
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	; 0x38
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <xQueueGenericCreateStatic+0x52>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <xQueueGenericCreateStatic+0x56>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <xQueueGenericCreateStatic+0x58>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	623b      	str	r3, [r7, #32]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <xQueueGenericCreateStatic+0x7e>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <xQueueGenericCreateStatic+0x82>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <xQueueGenericCreateStatic+0x84>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10a      	bne.n	80043a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	61fb      	str	r3, [r7, #28]
}
 80043a2:	bf00      	nop
 80043a4:	e7fe      	b.n	80043a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043a6:	2350      	movs	r3, #80	; 0x50
 80043a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b50      	cmp	r3, #80	; 0x50
 80043ae:	d00a      	beq.n	80043c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	61bb      	str	r3, [r7, #24]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00d      	beq.n	80043ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f843 	bl	8004472 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3730      	adds	r7, #48	; 0x30
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08a      	sub	sp, #40	; 0x28
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	4613      	mov	r3, r2
 8004402:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <xQueueGenericCreate+0x2a>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	613b      	str	r3, [r7, #16]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e004      	b.n	8004436 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3350      	adds	r3, #80	; 0x50
 800443a:	4618      	mov	r0, r3
 800443c:	f002 faa6 	bl	800698c <pvPortMalloc>
 8004440:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00f      	beq.n	8004468 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	3350      	adds	r3, #80	; 0x50
 800444c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004456:	79fa      	ldrb	r2, [r7, #7]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f805 	bl	8004472 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004468:	69bb      	ldr	r3, [r7, #24]
	}
 800446a:	4618      	mov	r0, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e002      	b.n	8004494 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044a0:	2101      	movs	r1, #1
 80044a2:	69b8      	ldr	r0, [r7, #24]
 80044a4:	f7ff fec8 	bl	8004238 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044b0:	bf00      	nop
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00e      	beq.n	80044e4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044d8:	2300      	movs	r3, #0
 80044da:	2200      	movs	r2, #0
 80044dc:	2100      	movs	r1, #0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f81c 	bl	800451c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044f6:	2301      	movs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	461a      	mov	r2, r3
 8004502:	6939      	ldr	r1, [r7, #16]
 8004504:	6978      	ldr	r0, [r7, #20]
 8004506:	f7ff ff76 	bl	80043f6 <xQueueGenericCreate>
 800450a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff ffd3 	bl	80044b8 <prvInitialiseMutex>

		return pxNewQueue;
 8004512:	68fb      	ldr	r3, [r7, #12]
	}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	; 0x38
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xQueueGenericSend+0x32>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <xQueueGenericSend+0x40>
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <xQueueGenericSend+0x44>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <xQueueGenericSend+0x46>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <xQueueGenericSend+0x60>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d103      	bne.n	800458a <xQueueGenericSend+0x6e>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <xQueueGenericSend+0x72>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <xQueueGenericSend+0x74>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueGenericSend+0x8e>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	623b      	str	r3, [r7, #32]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045aa:	f001 fb03 	bl	8005bb4 <xTaskGetSchedulerState>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <xQueueGenericSend+0x9e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <xQueueGenericSend+0xa2>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <xQueueGenericSend+0xa4>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <xQueueGenericSend+0xbe>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	61fb      	str	r3, [r7, #28]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045da:	f002 f8d7 	bl	800678c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d302      	bcc.n	80045f0 <xQueueGenericSend+0xd4>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d129      	bne.n	8004644 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f6:	f000 fb2a 	bl	8004c4e <prvCopyDataToQueue>
 80045fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	3324      	adds	r3, #36	; 0x24
 8004608:	4618      	mov	r0, r3
 800460a:	f001 f90d 	bl	8005828 <xTaskRemoveFromEventList>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d013      	beq.n	800463c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004614:	4b3f      	ldr	r3, [pc, #252]	; (8004714 <xQueueGenericSend+0x1f8>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	e00a      	b.n	800463c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d007      	beq.n	800463c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800462c:	4b39      	ldr	r3, [pc, #228]	; (8004714 <xQueueGenericSend+0x1f8>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800463c:	f002 f8d6 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 8004640:	2301      	movs	r3, #1
 8004642:	e063      	b.n	800470c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800464a:	f002 f8cf 	bl	80067ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800464e:	2300      	movs	r3, #0
 8004650:	e05c      	b.n	800470c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004658:	f107 0314 	add.w	r3, r7, #20
 800465c:	4618      	mov	r0, r3
 800465e:	f001 f947 	bl	80058f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004666:	f002 f8c1 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800466a:	f000 feb1 	bl	80053d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800466e:	f002 f88d 	bl	800678c <vPortEnterCritical>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004678:	b25b      	sxtb	r3, r3
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d103      	bne.n	8004688 <xQueueGenericSend+0x16c>
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800468e:	b25b      	sxtb	r3, r3
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d103      	bne.n	800469e <xQueueGenericSend+0x182>
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800469e:	f002 f8a5 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046a2:	1d3a      	adds	r2, r7, #4
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 f936 	bl	800591c <xTaskCheckForTimeOut>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d124      	bne.n	8004700 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b8:	f000 fbc1 	bl	8004e3e <prvIsQueueFull>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	3310      	adds	r3, #16
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 f85c 	bl	8005788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d2:	f000 fb4c 	bl	8004d6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046d6:	f000 fe89 	bl	80053ec <xTaskResumeAll>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f af7c 	bne.w	80045da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <xQueueGenericSend+0x1f8>)
 80046e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	e772      	b.n	80045da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f6:	f000 fb3a 	bl	8004d6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046fa:	f000 fe77 	bl	80053ec <xTaskResumeAll>
 80046fe:	e76c      	b.n	80045da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004702:	f000 fb34 	bl	8004d6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004706:	f000 fe71 	bl	80053ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800470a:	2300      	movs	r3, #0
		}
	}
}
 800470c:	4618      	mov	r0, r3
 800470e:	3738      	adds	r7, #56	; 0x38
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08e      	sub	sp, #56	; 0x38
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <xQueueGenericSendFromISR+0x3c>
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <xQueueGenericSendFromISR+0x40>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <xQueueGenericSendFromISR+0x42>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	623b      	str	r3, [r7, #32]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d103      	bne.n	8004782 <xQueueGenericSendFromISR+0x6a>
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <xQueueGenericSendFromISR+0x6e>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <xQueueGenericSendFromISR+0x70>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61fb      	str	r3, [r7, #28]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047a2:	f002 f8b5 	bl	8006910 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047a6:	f3ef 8211 	mrs	r2, BASEPRI
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	61ba      	str	r2, [r7, #24]
 80047bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047be:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <xQueueGenericSendFromISR+0xbc>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d12c      	bne.n	800482e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e4:	f000 fa33 	bl	8004c4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047e8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d112      	bne.n	8004818 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	3324      	adds	r3, #36	; 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f812 	bl	8005828 <xTaskRemoveFromEventList>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00e      	beq.n	8004828 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004818:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800481c:	3301      	adds	r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	b25a      	sxtb	r2, r3
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800482c:	e001      	b.n	8004832 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800482e:	2300      	movs	r3, #0
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800483c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004840:	4618      	mov	r0, r3
 8004842:	3738      	adds	r7, #56	; 0x38
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <xQueueReceive+0x30>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	623b      	str	r3, [r7, #32]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <xQueueReceive+0x3e>
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <xQueueReceive+0x42>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <xQueueReceive+0x44>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <xQueueReceive+0x5e>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61fb      	str	r3, [r7, #28]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a6:	f001 f985 	bl	8005bb4 <xTaskGetSchedulerState>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <xQueueReceive+0x6e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <xQueueReceive+0x72>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <xQueueReceive+0x74>
 80048ba:	2300      	movs	r3, #0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <xQueueReceive+0x8e>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	61bb      	str	r3, [r7, #24]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80048d6:	f001 ff59 	bl	800678c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01f      	beq.n	8004926 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ea:	f000 fa1a 	bl	8004d22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1e5a      	subs	r2, r3, #1
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00f      	beq.n	800491e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	3310      	adds	r3, #16
 8004902:	4618      	mov	r0, r3
 8004904:	f000 ff90 	bl	8005828 <xTaskRemoveFromEventList>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800490e:	4b3d      	ldr	r3, [pc, #244]	; (8004a04 <xQueueReceive+0x1bc>)
 8004910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800491e:	f001 ff65 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 8004922:	2301      	movs	r3, #1
 8004924:	e069      	b.n	80049fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492c:	f001 ff5e 	bl	80067ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004930:	2300      	movs	r3, #0
 8004932:	e062      	b.n	80049fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800493a:	f107 0310 	add.w	r3, r7, #16
 800493e:	4618      	mov	r0, r3
 8004940:	f000 ffd6 	bl	80058f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004948:	f001 ff50 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494c:	f000 fd40 	bl	80053d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004950:	f001 ff1c 	bl	800678c <vPortEnterCritical>
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800495a:	b25b      	sxtb	r3, r3
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d103      	bne.n	800496a <xQueueReceive+0x122>
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004970:	b25b      	sxtb	r3, r3
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d103      	bne.n	8004980 <xQueueReceive+0x138>
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	f001 ff34 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004984:	1d3a      	adds	r2, r7, #4
 8004986:	f107 0310 	add.w	r3, r7, #16
 800498a:	4611      	mov	r1, r2
 800498c:	4618      	mov	r0, r3
 800498e:	f000 ffc5 	bl	800591c <xTaskCheckForTimeOut>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d123      	bne.n	80049e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499a:	f000 fa3a 	bl	8004e12 <prvIsQueueEmpty>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d017      	beq.n	80049d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	3324      	adds	r3, #36	; 0x24
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 feeb 	bl	8005788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b4:	f000 f9db 	bl	8004d6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049b8:	f000 fd18 	bl	80053ec <xTaskResumeAll>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d189      	bne.n	80048d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <xQueueReceive+0x1bc>)
 80049c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	e780      	b.n	80048d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d6:	f000 f9ca 	bl	8004d6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049da:	f000 fd07 	bl	80053ec <xTaskResumeAll>
 80049de:	e77a      	b.n	80048d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e2:	f000 f9c4 	bl	8004d6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049e6:	f000 fd01 	bl	80053ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ec:	f000 fa11 	bl	8004e12 <prvIsQueueEmpty>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f43f af6f 	beq.w	80048d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3730      	adds	r7, #48	; 0x30
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	; 0x38
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	623b      	str	r3, [r7, #32]
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	61fb      	str	r3, [r7, #28]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a58:	f001 f8ac 	bl	8005bb4 <xTaskGetSchedulerState>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <xQueueSemaphoreTake+0x60>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <xQueueSemaphoreTake+0x64>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <xQueueSemaphoreTake+0x66>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	61bb      	str	r3, [r7, #24]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a88:	f001 fe80 	bl	800678c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d024      	beq.n	8004ae2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	1e5a      	subs	r2, r3, #1
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004aa8:	f001 fa04 	bl	8005eb4 <pvTaskIncrementMutexHeldCount>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00f      	beq.n	8004ada <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abc:	3310      	adds	r3, #16
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 feb2 	bl	8005828 <xTaskRemoveFromEventList>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004aca:	4b54      	ldr	r3, [pc, #336]	; (8004c1c <xQueueSemaphoreTake+0x214>)
 8004acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ada:	f001 fe87 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e097      	b.n	8004c12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d111      	bne.n	8004b0c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	617b      	str	r3, [r7, #20]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b04:	f001 fe72 	bl	80067ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e082      	b.n	8004c12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b12:	f107 030c 	add.w	r3, r7, #12
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 feea 	bl	80058f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b20:	f001 fe64 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b24:	f000 fc54 	bl	80053d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b28:	f001 fe30 	bl	800678c <vPortEnterCritical>
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d103      	bne.n	8004b42 <xQueueSemaphoreTake+0x13a>
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d103      	bne.n	8004b58 <xQueueSemaphoreTake+0x150>
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b58:	f001 fe48 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5c:	463a      	mov	r2, r7
 8004b5e:	f107 030c 	add.w	r3, r7, #12
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fed9 	bl	800591c <xTaskCheckForTimeOut>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d132      	bne.n	8004bd6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b72:	f000 f94e 	bl	8004e12 <prvIsQueueEmpty>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d026      	beq.n	8004bca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b84:	f001 fe02 	bl	800678c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 f82f 	bl	8005bf0 <xTaskPriorityInherit>
 8004b92:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b94:	f001 fe2a 	bl	80067ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	3324      	adds	r3, #36	; 0x24
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fdf1 	bl	8005788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ba8:	f000 f8e1 	bl	8004d6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bac:	f000 fc1e 	bl	80053ec <xTaskResumeAll>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f47f af68 	bne.w	8004a88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <xQueueSemaphoreTake+0x214>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	e75e      	b.n	8004a88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bcc:	f000 f8cf 	bl	8004d6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bd0:	f000 fc0c 	bl	80053ec <xTaskResumeAll>
 8004bd4:	e758      	b.n	8004a88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bd8:	f000 f8c9 	bl	8004d6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bdc:	f000 fc06 	bl	80053ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004be2:	f000 f916 	bl	8004e12 <prvIsQueueEmpty>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f43f af4d 	beq.w	8004a88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00d      	beq.n	8004c10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004bf4:	f001 fdca 	bl	800678c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bfa:	f000 f811 	bl	8004c20 <prvGetDisinheritPriorityAfterTimeout>
 8004bfe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 f8ce 	bl	8005da8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c0c:	f001 fdee 	bl	80067ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3738      	adds	r7, #56	; 0x38
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e001      	b.n	8004c42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c42:	68fb      	ldr	r3, [r7, #12]
	}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr

08004c4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d14d      	bne.n	8004d10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 f827 	bl	8005ccc <xTaskPriorityDisinherit>
 8004c7e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	e043      	b.n	8004d10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d119      	bne.n	8004cc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6898      	ldr	r0, [r3, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	461a      	mov	r2, r3
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	f002 f8d3 	bl	8006e44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	441a      	add	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d32b      	bcc.n	8004d10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	e026      	b.n	8004d10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68d8      	ldr	r0, [r3, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	f002 f8b9 	bl	8006e44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	425b      	negs	r3, r3
 8004cdc:	441a      	add	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d207      	bcs.n	8004cfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d105      	bne.n	8004d10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d18:	697b      	ldr	r3, [r7, #20]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d018      	beq.n	8004d66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	441a      	add	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d303      	bcc.n	8004d56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68d9      	ldr	r1, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6838      	ldr	r0, [r7, #0]
 8004d62:	f002 f86f 	bl	8006e44 <memcpy>
	}
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d76:	f001 fd09 	bl	800678c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d82:	e011      	b.n	8004da8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fd49 	bl	8005828 <xTaskRemoveFromEventList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d9c:	f000 fe20 	bl	80059e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dce9      	bgt.n	8004d84 <prvUnlockQueue+0x16>
 8004db0:	e000      	b.n	8004db4 <prvUnlockQueue+0x46>
					break;
 8004db2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	22ff      	movs	r2, #255	; 0xff
 8004db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dbc:	f001 fd16 	bl	80067ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dc0:	f001 fce4 	bl	800678c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dcc:	e011      	b.n	8004df2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d012      	beq.n	8004dfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3310      	adds	r3, #16
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fd24 	bl	8005828 <xTaskRemoveFromEventList>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004de6:	f000 fdfb 	bl	80059e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004df2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	dce9      	bgt.n	8004dce <prvUnlockQueue+0x60>
 8004dfa:	e000      	b.n	8004dfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004dfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	22ff      	movs	r2, #255	; 0xff
 8004e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e06:	f001 fcf1 	bl	80067ec <vPortExitCritical>
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e1a:	f001 fcb7 	bl	800678c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e26:	2301      	movs	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e001      	b.n	8004e30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e30:	f001 fcdc 	bl	80067ec <vPortExitCritical>

	return xReturn;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e46:	f001 fca1 	bl	800678c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d102      	bne.n	8004e5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e56:	2301      	movs	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e001      	b.n	8004e60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e60:	f001 fcc4 	bl	80067ec <vPortExitCritical>

	return xReturn;
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e014      	b.n	8004eaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e80:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <vQueueAddToRegistry+0x4c>)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e8c:	490b      	ldr	r1, [pc, #44]	; (8004ebc <vQueueAddToRegistry+0x4c>)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e96:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <vQueueAddToRegistry+0x4c>)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ea2:	e006      	b.n	8004eb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b07      	cmp	r3, #7
 8004eae:	d9e7      	bls.n	8004e80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	200008ac 	.word	0x200008ac

08004ec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ed0:	f001 fc5c 	bl	800678c <vPortEnterCritical>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d103      	bne.n	8004eea <vQueueWaitForMessageRestricted+0x2a>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d103      	bne.n	8004f00 <vQueueWaitForMessageRestricted+0x40>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	f001 fc74 	bl	80067ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3324      	adds	r3, #36	; 0x24
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fc5b 	bl	80057d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f7ff ff27 	bl	8004d6e <prvUnlockQueue>
	}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	; 0x38
 8004f2c:	af04      	add	r7, sp, #16
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	623b      	str	r3, [r7, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fb      	str	r3, [r7, #28]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f6e:	23a8      	movs	r3, #168	; 0xa8
 8004f70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2ba8      	cmp	r3, #168	; 0xa8
 8004f76:	d00a      	beq.n	8004f8e <xTaskCreateStatic+0x66>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61bb      	str	r3, [r7, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01e      	beq.n	8004fd2 <xTaskCreateStatic+0xaa>
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01b      	beq.n	8004fd2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fac:	2300      	movs	r3, #0
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	9302      	str	r3, [sp, #8]
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f851 	bl	800506c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fcc:	f000 f8ec 	bl	80051a8 <prvAddNewTaskToReadyList>
 8004fd0:	e001      	b.n	8004fd6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fd6:	697b      	ldr	r3, [r7, #20]
	}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af04      	add	r7, sp, #16
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fcc9 	bl	800698c <pvPortMalloc>
 8004ffa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00e      	beq.n	8005020 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005002:	20a8      	movs	r0, #168	; 0xa8
 8005004:	f001 fcc2 	bl	800698c <pvPortMalloc>
 8005008:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
 8005016:	e005      	b.n	8005024 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005018:	6978      	ldr	r0, [r7, #20]
 800501a:	f001 fd7b 	bl	8006b14 <vPortFree>
 800501e:	e001      	b.n	8005024 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d017      	beq.n	800505a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	2300      	movs	r3, #0
 8005036:	9303      	str	r3, [sp, #12]
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	9302      	str	r3, [sp, #8]
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f80f 	bl	800506c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800504e:	69f8      	ldr	r0, [r7, #28]
 8005050:	f000 f8aa 	bl	80051a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005054:	2301      	movs	r3, #1
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	e002      	b.n	8005060 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800505a:	f04f 33ff 	mov.w	r3, #4294967295
 800505e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005060:	69bb      	ldr	r3, [r7, #24]
	}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	461a      	mov	r2, r3
 8005084:	21a5      	movs	r1, #165	; 0xa5
 8005086:	f001 fe59 	bl	8006d3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005094:	3b01      	subs	r3, #1
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f023 0307 	bic.w	r3, r3, #7
 80050a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	617b      	str	r3, [r7, #20]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	e012      	b.n	80050f0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	7819      	ldrb	r1, [r3, #0]
 80050d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	3334      	adds	r3, #52	; 0x34
 80050da:	460a      	mov	r2, r1
 80050dc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	4413      	add	r3, r2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b0f      	cmp	r3, #15
 80050f4:	d9e9      	bls.n	80050ca <prvInitialiseNewTask+0x5e>
 80050f6:	e000      	b.n	80050fa <prvInitialiseNewTask+0x8e>
		{
			break;
 80050f8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	2b37      	cmp	r3, #55	; 0x37
 8005106:	d901      	bls.n	800510c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005108:	2337      	movs	r3, #55	; 0x37
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005116:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	2200      	movs	r2, #0
 800511c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	3304      	adds	r3, #4
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fff7 	bl	8004116 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	3318      	adds	r3, #24
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fff2 	bl	8004116 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005146:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2200      	movs	r2, #0
 8005154:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	3354      	adds	r3, #84	; 0x54
 800515c:	224c      	movs	r2, #76	; 0x4c
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f001 fdeb 	bl	8006d3c <memset>
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	4a0c      	ldr	r2, [pc, #48]	; (800519c <prvInitialiseNewTask+0x130>)
 800516a:	659a      	str	r2, [r3, #88]	; 0x58
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <prvInitialiseNewTask+0x134>)
 8005170:	65da      	str	r2, [r3, #92]	; 0x5c
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <prvInitialiseNewTask+0x138>)
 8005176:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	69b8      	ldr	r0, [r7, #24]
 800517e:	f001 fa13 	bl	80065a8 <pxPortInitialiseStack>
 8005182:	4602      	mov	r2, r0
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005192:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005194:	bf00      	nop
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20001b38 	.word	0x20001b38
 80051a0:	20001ba0 	.word	0x20001ba0
 80051a4:	20001c08 	.word	0x20001c08

080051a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051b0:	f001 faec 	bl	800678c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051b4:	4b2d      	ldr	r3, [pc, #180]	; (800526c <prvAddNewTaskToReadyList+0xc4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <prvAddNewTaskToReadyList+0xc4>)
 80051bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051be:	4b2c      	ldr	r3, [pc, #176]	; (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051c6:	4a2a      	ldr	r2, [pc, #168]	; (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <prvAddNewTaskToReadyList+0xc4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d110      	bne.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051d4:	f000 fc28 	bl	8005a28 <prvInitialiseTaskLists>
 80051d8:	e00d      	b.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051da:	4b26      	ldr	r3, [pc, #152]	; (8005274 <prvAddNewTaskToReadyList+0xcc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051e2:	4b23      	ldr	r3, [pc, #140]	; (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d802      	bhi.n	80051f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051f0:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <prvAddNewTaskToReadyList+0xc8>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <prvAddNewTaskToReadyList+0xd0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	4a1e      	ldr	r2, [pc, #120]	; (8005278 <prvAddNewTaskToReadyList+0xd0>)
 80051fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005200:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <prvAddNewTaskToReadyList+0xd0>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <prvAddNewTaskToReadyList+0xd4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <prvAddNewTaskToReadyList+0x74>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	4a18      	ldr	r2, [pc, #96]	; (800527c <prvAddNewTaskToReadyList+0xd4>)
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a15      	ldr	r2, [pc, #84]	; (8005280 <prvAddNewTaskToReadyList+0xd8>)
 800522a:	441a      	add	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f7fe ff7b 	bl	800412e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005238:	f001 fad8 	bl	80067ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800523c:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <prvAddNewTaskToReadyList+0xcc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00e      	beq.n	8005262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <prvAddNewTaskToReadyList+0xc8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	429a      	cmp	r2, r3
 8005250:	d207      	bcs.n	8005262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005252:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <prvAddNewTaskToReadyList+0xdc>)
 8005254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000dc0 	.word	0x20000dc0
 8005270:	200008ec 	.word	0x200008ec
 8005274:	20000dcc 	.word	0x20000dcc
 8005278:	20000ddc 	.word	0x20000ddc
 800527c:	20000dc8 	.word	0x20000dc8
 8005280:	200008f0 	.word	0x200008f0
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d017      	beq.n	80052ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <vTaskDelay+0x60>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <vTaskDelay+0x30>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	60bb      	str	r3, [r7, #8]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052b8:	f000 f88a 	bl	80053d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052bc:	2100      	movs	r1, #0
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fe0c 	bl	8005edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052c4:	f000 f892 	bl	80053ec <xTaskResumeAll>
 80052c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <vTaskDelay+0x64>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000de8 	.word	0x20000de8
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052fe:	463a      	mov	r2, r7
 8005300:	1d39      	adds	r1, r7, #4
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f7fe feb4 	bl	8004074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	9202      	str	r2, [sp, #8]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	2300      	movs	r3, #0
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2300      	movs	r3, #0
 800531c:	460a      	mov	r2, r1
 800531e:	4924      	ldr	r1, [pc, #144]	; (80053b0 <vTaskStartScheduler+0xc0>)
 8005320:	4824      	ldr	r0, [pc, #144]	; (80053b4 <vTaskStartScheduler+0xc4>)
 8005322:	f7ff fe01 	bl	8004f28 <xTaskCreateStatic>
 8005326:	4603      	mov	r3, r0
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <vTaskStartScheduler+0xc8>)
 800532a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800532c:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <vTaskStartScheduler+0xc8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005334:	2301      	movs	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e001      	b.n	800533e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d102      	bne.n	800534a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005344:	f000 fe1e 	bl	8005f84 <xTimerCreateTimerTask>
 8005348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d11b      	bne.n	8005388 <vTaskStartScheduler+0x98>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	613b      	str	r3, [r7, #16]
}
 8005362:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <vTaskStartScheduler+0xcc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3354      	adds	r3, #84	; 0x54
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <vTaskStartScheduler+0xd0>)
 800536c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <vTaskStartScheduler+0xd4>)
 8005370:	f04f 32ff 	mov.w	r2, #4294967295
 8005374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <vTaskStartScheduler+0xd8>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800537c:	4b13      	ldr	r3, [pc, #76]	; (80053cc <vTaskStartScheduler+0xdc>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005382:	f001 f991 	bl	80066a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005386:	e00e      	b.n	80053a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d10a      	bne.n	80053a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <vTaskStartScheduler+0xb4>
}
 80053a6:	bf00      	nop
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	08006f60 	.word	0x08006f60
 80053b4:	080059f9 	.word	0x080059f9
 80053b8:	20000de4 	.word	0x20000de4
 80053bc:	200008ec 	.word	0x200008ec
 80053c0:	2000005c 	.word	0x2000005c
 80053c4:	20000de0 	.word	0x20000de0
 80053c8:	20000dcc 	.word	0x20000dcc
 80053cc:	20000dc4 	.word	0x20000dc4

080053d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80053d4:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <vTaskSuspendAll+0x18>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	4a03      	ldr	r2, [pc, #12]	; (80053e8 <vTaskSuspendAll+0x18>)
 80053dc:	6013      	str	r3, [r2, #0]
}
 80053de:	bf00      	nop
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000de8 	.word	0x20000de8

080053ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053fa:	4b42      	ldr	r3, [pc, #264]	; (8005504 <xTaskResumeAll+0x118>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xTaskResumeAll+0x2c>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	603b      	str	r3, [r7, #0]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005418:	f001 f9b8 	bl	800678c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800541c:	4b39      	ldr	r3, [pc, #228]	; (8005504 <xTaskResumeAll+0x118>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	4a38      	ldr	r2, [pc, #224]	; (8005504 <xTaskResumeAll+0x118>)
 8005424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005426:	4b37      	ldr	r3, [pc, #220]	; (8005504 <xTaskResumeAll+0x118>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d162      	bne.n	80054f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800542e:	4b36      	ldr	r3, [pc, #216]	; (8005508 <xTaskResumeAll+0x11c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d05e      	beq.n	80054f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005436:	e02f      	b.n	8005498 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005438:	4b34      	ldr	r3, [pc, #208]	; (800550c <xTaskResumeAll+0x120>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3318      	adds	r3, #24
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe fecd 	bl	80041e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7fe fec8 	bl	80041e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <xTaskResumeAll+0x124>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d903      	bls.n	8005468 <xTaskResumeAll+0x7c>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <xTaskResumeAll+0x124>)
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a27      	ldr	r2, [pc, #156]	; (8005514 <xTaskResumeAll+0x128>)
 8005476:	441a      	add	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f7fe fe55 	bl	800412e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	4b23      	ldr	r3, [pc, #140]	; (8005518 <xTaskResumeAll+0x12c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005492:	4b22      	ldr	r3, [pc, #136]	; (800551c <xTaskResumeAll+0x130>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005498:	4b1c      	ldr	r3, [pc, #112]	; (800550c <xTaskResumeAll+0x120>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1cb      	bne.n	8005438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054a6:	f000 fb61 	bl	8005b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <xTaskResumeAll+0x134>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d010      	beq.n	80054d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054b6:	f000 f845 	bl	8005544 <xTaskIncrementTick>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <xTaskResumeAll+0x130>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f1      	bne.n	80054b6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <xTaskResumeAll+0x134>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054d8:	4b10      	ldr	r3, [pc, #64]	; (800551c <xTaskResumeAll+0x130>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <xTaskResumeAll+0x138>)
 80054e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054f4:	f001 f97a 	bl	80067ec <vPortExitCritical>

	return xAlreadyYielded;
 80054f8:	68bb      	ldr	r3, [r7, #8]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	20000de8 	.word	0x20000de8
 8005508:	20000dc0 	.word	0x20000dc0
 800550c:	20000d80 	.word	0x20000d80
 8005510:	20000dc8 	.word	0x20000dc8
 8005514:	200008f0 	.word	0x200008f0
 8005518:	200008ec 	.word	0x200008ec
 800551c:	20000dd4 	.word	0x20000dd4
 8005520:	20000dd0 	.word	0x20000dd0
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800552e:	4b04      	ldr	r3, [pc, #16]	; (8005540 <xTaskGetTickCount+0x18>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005534:	687b      	ldr	r3, [r7, #4]
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr
 8005540:	20000dc4 	.word	0x20000dc4

08005544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554e:	4b51      	ldr	r3, [pc, #324]	; (8005694 <xTaskIncrementTick+0x150>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f040 808e 	bne.w	8005674 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005558:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <xTaskIncrementTick+0x154>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005560:	4a4d      	ldr	r2, [pc, #308]	; (8005698 <xTaskIncrementTick+0x154>)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d120      	bne.n	80055ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800556c:	4b4b      	ldr	r3, [pc, #300]	; (800569c <xTaskIncrementTick+0x158>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <xTaskIncrementTick+0x48>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	603b      	str	r3, [r7, #0]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xTaskIncrementTick+0x46>
 800558c:	4b43      	ldr	r3, [pc, #268]	; (800569c <xTaskIncrementTick+0x158>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <xTaskIncrementTick+0x15c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a41      	ldr	r2, [pc, #260]	; (800569c <xTaskIncrementTick+0x158>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4a41      	ldr	r2, [pc, #260]	; (80056a0 <xTaskIncrementTick+0x15c>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	4b40      	ldr	r3, [pc, #256]	; (80056a4 <xTaskIncrementTick+0x160>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	4a3f      	ldr	r2, [pc, #252]	; (80056a4 <xTaskIncrementTick+0x160>)
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	f000 fadf 	bl	8005b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055ae:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <xTaskIncrementTick+0x164>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d34e      	bcc.n	8005656 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b8:	4b38      	ldr	r3, [pc, #224]	; (800569c <xTaskIncrementTick+0x158>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xTaskIncrementTick+0x82>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xTaskIncrementTick+0x84>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055cc:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <xTaskIncrementTick+0x164>)
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	601a      	str	r2, [r3, #0]
					break;
 80055d4:	e03f      	b.n	8005656 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055d6:	4b31      	ldr	r3, [pc, #196]	; (800569c <xTaskIncrementTick+0x158>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d203      	bcs.n	80055f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055ee:	4a2e      	ldr	r2, [pc, #184]	; (80056a8 <xTaskIncrementTick+0x164>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6013      	str	r3, [r2, #0]
						break;
 80055f4:	e02f      	b.n	8005656 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe fdf2 	bl	80041e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	3318      	adds	r3, #24
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fde9 	bl	80041e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005616:	4b25      	ldr	r3, [pc, #148]	; (80056ac <xTaskIncrementTick+0x168>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <xTaskIncrementTick+0xe2>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	4a22      	ldr	r2, [pc, #136]	; (80056ac <xTaskIncrementTick+0x168>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <xTaskIncrementTick+0x16c>)
 8005634:	441a      	add	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7fe fd76 	bl	800412e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <xTaskIncrementTick+0x170>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	429a      	cmp	r2, r3
 800564e:	d3b3      	bcc.n	80055b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005654:	e7b0      	b.n	80055b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005656:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <xTaskIncrementTick+0x170>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4914      	ldr	r1, [pc, #80]	; (80056b0 <xTaskIncrementTick+0x16c>)
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d907      	bls.n	800567e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e004      	b.n	800567e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005674:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <xTaskIncrementTick+0x174>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	4a0f      	ldr	r2, [pc, #60]	; (80056b8 <xTaskIncrementTick+0x174>)
 800567c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800567e:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <xTaskIncrementTick+0x178>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800568a:	697b      	ldr	r3, [r7, #20]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000de8 	.word	0x20000de8
 8005698:	20000dc4 	.word	0x20000dc4
 800569c:	20000d78 	.word	0x20000d78
 80056a0:	20000d7c 	.word	0x20000d7c
 80056a4:	20000dd8 	.word	0x20000dd8
 80056a8:	20000de0 	.word	0x20000de0
 80056ac:	20000dc8 	.word	0x20000dc8
 80056b0:	200008f0 	.word	0x200008f0
 80056b4:	200008ec 	.word	0x200008ec
 80056b8:	20000dd0 	.word	0x20000dd0
 80056bc:	20000dd4 	.word	0x20000dd4

080056c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056c6:	4b2a      	ldr	r3, [pc, #168]	; (8005770 <vTaskSwitchContext+0xb0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <vTaskSwitchContext+0xb4>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056d4:	e046      	b.n	8005764 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80056d6:	4b27      	ldr	r3, [pc, #156]	; (8005774 <vTaskSwitchContext+0xb4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80056dc:	4b26      	ldr	r3, [pc, #152]	; (8005778 <vTaskSwitchContext+0xb8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e010      	b.n	8005706 <vTaskSwitchContext+0x46>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <vTaskSwitchContext+0x40>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	607b      	str	r3, [r7, #4]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <vTaskSwitchContext+0x3e>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3b01      	subs	r3, #1
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	491d      	ldr	r1, [pc, #116]	; (800577c <vTaskSwitchContext+0xbc>)
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0e4      	beq.n	80056e4 <vTaskSwitchContext+0x24>
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a15      	ldr	r2, [pc, #84]	; (800577c <vTaskSwitchContext+0xbc>)
 8005726:	4413      	add	r3, r2
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	605a      	str	r2, [r3, #4]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	3308      	adds	r3, #8
 800573c:	429a      	cmp	r2, r3
 800573e:	d104      	bne.n	800574a <vTaskSwitchContext+0x8a>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	605a      	str	r2, [r3, #4]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <vTaskSwitchContext+0xc0>)
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <vTaskSwitchContext+0xb8>)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <vTaskSwitchContext+0xc0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3354      	adds	r3, #84	; 0x54
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <vTaskSwitchContext+0xc4>)
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000de8 	.word	0x20000de8
 8005774:	20000dd4 	.word	0x20000dd4
 8005778:	20000dc8 	.word	0x20000dc8
 800577c:	200008f0 	.word	0x200008f0
 8005780:	200008ec 	.word	0x200008ec
 8005784:	2000005c 	.word	0x2000005c

08005788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60fb      	str	r3, [r7, #12]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <vTaskPlaceOnEventList+0x44>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3318      	adds	r3, #24
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fe fcdc 	bl	8004174 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057bc:	2101      	movs	r1, #1
 80057be:	6838      	ldr	r0, [r7, #0]
 80057c0:	f000 fb8c 	bl	8005edc <prvAddCurrentTaskToDelayedList>
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	200008ec 	.word	0x200008ec

080057d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	617b      	str	r3, [r7, #20]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057f8:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <vTaskPlaceOnEventListRestricted+0x54>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3318      	adds	r3, #24
 80057fe:	4619      	mov	r1, r3
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7fe fc94 	bl	800412e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	68b8      	ldr	r0, [r7, #8]
 8005816:	f000 fb61 	bl	8005edc <prvAddCurrentTaskToDelayedList>
	}
 800581a:	bf00      	nop
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	200008ec 	.word	0x200008ec

08005828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3318      	adds	r3, #24
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fcc3 	bl	80041e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800585e:	4b1e      	ldr	r3, [pc, #120]	; (80058d8 <xTaskRemoveFromEventList+0xb0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11d      	bne.n	80058a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fcba 	bl	80041e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <xTaskRemoveFromEventList+0xb4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d903      	bls.n	8005884 <xTaskRemoveFromEventList+0x5c>
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4a16      	ldr	r2, [pc, #88]	; (80058dc <xTaskRemoveFromEventList+0xb4>)
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <xTaskRemoveFromEventList+0xb8>)
 8005892:	441a      	add	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f7fe fc47 	bl	800412e <vListInsertEnd>
 80058a0:	e005      	b.n	80058ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3318      	adds	r3, #24
 80058a6:	4619      	mov	r1, r3
 80058a8:	480e      	ldr	r0, [pc, #56]	; (80058e4 <xTaskRemoveFromEventList+0xbc>)
 80058aa:	f7fe fc40 	bl	800412e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <xTaskRemoveFromEventList+0xc0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d905      	bls.n	80058c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <xTaskRemoveFromEventList+0xc4>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e001      	b.n	80058cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058cc:	697b      	ldr	r3, [r7, #20]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000de8 	.word	0x20000de8
 80058dc:	20000dc8 	.word	0x20000dc8
 80058e0:	200008f0 	.word	0x200008f0
 80058e4:	20000d80 	.word	0x20000d80
 80058e8:	200008ec 	.word	0x200008ec
 80058ec:	20000dd4 	.word	0x20000dd4

080058f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <vTaskInternalSetTimeOutState+0x24>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005900:	4b05      	ldr	r3, [pc, #20]	; (8005918 <vTaskInternalSetTimeOutState+0x28>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000dd8 	.word	0x20000dd8
 8005918:	20000dc4 	.word	0x20000dc4

0800591c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	613b      	str	r3, [r7, #16]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800595e:	f000 ff15 	bl	800678c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005962:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <xTaskCheckForTimeOut+0xbc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d102      	bne.n	8005982 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e023      	b.n	80059ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b15      	ldr	r3, [pc, #84]	; (80059dc <xTaskCheckForTimeOut+0xc0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d007      	beq.n	800599e <xTaskCheckForTimeOut+0x82>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	429a      	cmp	r2, r3
 8005996:	d302      	bcc.n	800599e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	e015      	b.n	80059ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d20b      	bcs.n	80059c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff ff9b 	bl	80058f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e004      	b.n	80059ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059ca:	f000 ff0f 	bl	80067ec <vPortExitCritical>

	return xReturn;
 80059ce:	69fb      	ldr	r3, [r7, #28]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000dc4 	.word	0x20000dc4
 80059dc:	20000dd8 	.word	0x20000dd8

080059e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059e4:	4b03      	ldr	r3, [pc, #12]	; (80059f4 <vTaskMissedYield+0x14>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000dd4 	.word	0x20000dd4

080059f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a00:	f000 f852 	bl	8005aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <prvIdleTask+0x28>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d9f9      	bls.n	8005a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <prvIdleTask+0x2c>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a1c:	e7f0      	b.n	8005a00 <prvIdleTask+0x8>
 8005a1e:	bf00      	nop
 8005a20:	200008f0 	.word	0x200008f0
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	e00c      	b.n	8005a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <prvInitialiseTaskLists+0x60>)
 8005a40:	4413      	add	r3, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fe fb48 	bl	80040d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b37      	cmp	r3, #55	; 0x37
 8005a52:	d9ef      	bls.n	8005a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a54:	480d      	ldr	r0, [pc, #52]	; (8005a8c <prvInitialiseTaskLists+0x64>)
 8005a56:	f7fe fb3f 	bl	80040d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a5a:	480d      	ldr	r0, [pc, #52]	; (8005a90 <prvInitialiseTaskLists+0x68>)
 8005a5c:	f7fe fb3c 	bl	80040d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a60:	480c      	ldr	r0, [pc, #48]	; (8005a94 <prvInitialiseTaskLists+0x6c>)
 8005a62:	f7fe fb39 	bl	80040d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a66:	480c      	ldr	r0, [pc, #48]	; (8005a98 <prvInitialiseTaskLists+0x70>)
 8005a68:	f7fe fb36 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a6c:	480b      	ldr	r0, [pc, #44]	; (8005a9c <prvInitialiseTaskLists+0x74>)
 8005a6e:	f7fe fb33 	bl	80040d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <prvInitialiseTaskLists+0x78>)
 8005a74:	4a05      	ldr	r2, [pc, #20]	; (8005a8c <prvInitialiseTaskLists+0x64>)
 8005a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <prvInitialiseTaskLists+0x7c>)
 8005a7a:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <prvInitialiseTaskLists+0x68>)
 8005a7c:	601a      	str	r2, [r3, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200008f0 	.word	0x200008f0
 8005a8c:	20000d50 	.word	0x20000d50
 8005a90:	20000d64 	.word	0x20000d64
 8005a94:	20000d80 	.word	0x20000d80
 8005a98:	20000d94 	.word	0x20000d94
 8005a9c:	20000dac 	.word	0x20000dac
 8005aa0:	20000d78 	.word	0x20000d78
 8005aa4:	20000d7c 	.word	0x20000d7c

08005aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aae:	e019      	b.n	8005ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ab0:	f000 fe6c 	bl	800678c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <prvCheckTasksWaitingTermination+0x50>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fb8f 	bl	80041e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <prvCheckTasksWaitingTermination+0x54>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	4a0b      	ldr	r2, [pc, #44]	; (8005afc <prvCheckTasksWaitingTermination+0x54>)
 8005ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <prvCheckTasksWaitingTermination+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <prvCheckTasksWaitingTermination+0x58>)
 8005ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ada:	f000 fe87 	bl	80067ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f810 	bl	8005b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <prvCheckTasksWaitingTermination+0x58>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e1      	bne.n	8005ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000d94 	.word	0x20000d94
 8005afc:	20000dc0 	.word	0x20000dc0
 8005b00:	20000da8 	.word	0x20000da8

08005b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3354      	adds	r3, #84	; 0x54
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 f91b 	bl	8006d4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fff5 	bl	8006b14 <vPortFree>
				vPortFree( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fff2 	bl	8006b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b30:	e018      	b.n	8005b64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d103      	bne.n	8005b44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 ffe9 	bl	8006b14 <vPortFree>
	}
 8005b42:	e00f      	b.n	8005b64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d00a      	beq.n	8005b64 <prvDeleteTCB+0x60>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60fb      	str	r3, [r7, #12]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <prvDeleteTCB+0x5e>
	}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b72:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <prvResetNextTaskUnblockTime+0x40>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <prvResetNextTaskUnblockTime+0x14>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <prvResetNextTaskUnblockTime+0x16>
 8005b80:	2300      	movs	r3, #0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <prvResetNextTaskUnblockTime+0x44>)
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b8e:	e008      	b.n	8005ba2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <prvResetNextTaskUnblockTime+0x40>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <prvResetNextTaskUnblockTime+0x44>)
 8005ba0:	6013      	str	r3, [r2, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr
 8005bac:	20000d78 	.word	0x20000d78
 8005bb0:	20000de0 	.word	0x20000de0

08005bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <xTaskGetSchedulerState+0x34>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	e008      	b.n	8005bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc8:	4b08      	ldr	r3, [pc, #32]	; (8005bec <xTaskGetSchedulerState+0x38>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	e001      	b.n	8005bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bda:	687b      	ldr	r3, [r7, #4]
	}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000dcc 	.word	0x20000dcc
 8005bec:	20000de8 	.word	0x20000de8

08005bf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d056      	beq.n	8005cb4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0a:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <xTaskPriorityInherit+0xd0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d246      	bcs.n	8005ca2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	db06      	blt.n	8005c2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1c:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <xTaskPriorityInherit+0xd0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6959      	ldr	r1, [r3, #20]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <xTaskPriorityInherit+0xd4>)
 8005c3c:	4413      	add	r3, r2
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d101      	bne.n	8005c46 <xTaskPriorityInherit+0x56>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xTaskPriorityInherit+0x58>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d022      	beq.n	8005c92 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe fac7 	bl	80041e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <xTaskPriorityInherit+0xd0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c64:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <xTaskPriorityInherit+0xd8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d903      	bls.n	8005c74 <xTaskPriorityInherit+0x84>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4a15      	ldr	r2, [pc, #84]	; (8005cc8 <xTaskPriorityInherit+0xd8>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <xTaskPriorityInherit+0xd4>)
 8005c82:	441a      	add	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f7fe fa4f 	bl	800412e <vListInsertEnd>
 8005c90:	e004      	b.n	8005c9c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <xTaskPriorityInherit+0xd0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e008      	b.n	8005cb4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ca6:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <xTaskPriorityInherit+0xd0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d201      	bcs.n	8005cb4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200008ec 	.word	0x200008ec
 8005cc4:	200008f0 	.word	0x200008f0
 8005cc8:	20000dc8 	.word	0x20000dc8

08005ccc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d056      	beq.n	8005d90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <xTaskPriorityDisinherit+0xd0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d00a      	beq.n	8005d02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	60bb      	str	r3, [r7, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d24:	1e5a      	subs	r2, r3, #1
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d02c      	beq.n	8005d90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d128      	bne.n	8005d90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fa4e 	bl	80041e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <xTaskPriorityDisinherit+0xd4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d903      	bls.n	8005d70 <xTaskPriorityDisinherit+0xa4>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4a0c      	ldr	r2, [pc, #48]	; (8005da0 <xTaskPriorityDisinherit+0xd4>)
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <xTaskPriorityDisinherit+0xd8>)
 8005d7e:	441a      	add	r2, r3
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fe f9d1 	bl	800412e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d90:	697b      	ldr	r3, [r7, #20]
	}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200008ec 	.word	0x200008ec
 8005da0:	20000dc8 	.word	0x20000dc8
 8005da4:	200008f0 	.word	0x200008f0

08005da8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d06f      	beq.n	8005ea0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	60fb      	str	r3, [r7, #12]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d902      	bls.n	8005dee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	e002      	b.n	8005df4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d050      	beq.n	8005ea0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d14b      	bne.n	8005ea0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d10a      	bne.n	8005e28 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60bb      	str	r3, [r7, #8]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db04      	blt.n	8005e46 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	6959      	ldr	r1, [r3, #20]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005e56:	4413      	add	r3, r2
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d101      	bne.n	8005e60 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01c      	beq.n	8005ea0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe f9ba 	bl	80041e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d903      	bls.n	8005e84 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4a06      	ldr	r2, [pc, #24]	; (8005eac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005e92:	441a      	add	r2, r3
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f7fe f947 	bl	800412e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ea0:	bf00      	nop
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200008ec 	.word	0x200008ec
 8005eac:	200008f0 	.word	0x200008f0
 8005eb0:	20000dc8 	.word	0x20000dc8

08005eb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005eb8:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ec6:	3201      	adds	r2, #1
 8005ec8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005eca:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
	}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bc80      	pop	{r7}
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	200008ec 	.word	0x200008ec

08005edc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ee6:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eec:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe f976 	bl	80041e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d10a      	bne.n	8005f16 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f06:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4819      	ldr	r0, [pc, #100]	; (8005f74 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f10:	f7fe f90d 	bl	800412e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f14:	e026      	b.n	8005f64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d209      	bcs.n	8005f42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fe f91a 	bl	8004174 <vListInsert>
}
 8005f40:	e010      	b.n	8005f64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f42:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7fe f910 	bl	8004174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d202      	bcs.n	8005f64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f5e:	4a08      	ldr	r2, [pc, #32]	; (8005f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000dc4 	.word	0x20000dc4
 8005f70:	200008ec 	.word	0x200008ec
 8005f74:	20000dac 	.word	0x20000dac
 8005f78:	20000d7c 	.word	0x20000d7c
 8005f7c:	20000d78 	.word	0x20000d78
 8005f80:	20000de0 	.word	0x20000de0

08005f84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f8e:	f000 facb 	bl	8006528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <xTimerCreateTimerTask+0x80>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d021      	beq.n	8005fde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fa2:	1d3a      	adds	r2, r7, #4
 8005fa4:	f107 0108 	add.w	r1, r7, #8
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe f879 	bl	80040a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	9202      	str	r2, [sp, #8]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	4910      	ldr	r1, [pc, #64]	; (8006008 <xTimerCreateTimerTask+0x84>)
 8005fc6:	4811      	ldr	r0, [pc, #68]	; (800600c <xTimerCreateTimerTask+0x88>)
 8005fc8:	f7fe ffae 	bl	8004f28 <xTaskCreateStatic>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4a10      	ldr	r2, [pc, #64]	; (8006010 <xTimerCreateTimerTask+0x8c>)
 8005fd0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <xTimerCreateTimerTask+0x8c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	613b      	str	r3, [r7, #16]
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ffa:	697b      	ldr	r3, [r7, #20]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000e1c 	.word	0x20000e1c
 8006008:	08006f68 	.word	0x08006f68
 800600c:	08006131 	.word	0x08006131
 8006010:	20000e20 	.word	0x20000e20

08006014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006022:	2300      	movs	r3, #0
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xTimerGenericCommand+0x2e>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	623b      	str	r3, [r7, #32]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <xTimerGenericCommand+0x98>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d02a      	beq.n	80060a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b05      	cmp	r3, #5
 800605a:	dc18      	bgt.n	800608e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800605c:	f7ff fdaa 	bl	8005bb4 <xTaskGetSchedulerState>
 8006060:	4603      	mov	r3, r0
 8006062:	2b02      	cmp	r3, #2
 8006064:	d109      	bne.n	800607a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <xTimerGenericCommand+0x98>)
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	f107 0110 	add.w	r1, r7, #16
 800606e:	2300      	movs	r3, #0
 8006070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006072:	f7fe fa53 	bl	800451c <xQueueGenericSend>
 8006076:	6278      	str	r0, [r7, #36]	; 0x24
 8006078:	e012      	b.n	80060a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800607a:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <xTimerGenericCommand+0x98>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	f107 0110 	add.w	r1, r7, #16
 8006082:	2300      	movs	r3, #0
 8006084:	2200      	movs	r2, #0
 8006086:	f7fe fa49 	bl	800451c <xQueueGenericSend>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24
 800608c:	e008      	b.n	80060a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <xTimerGenericCommand+0x98>)
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	f107 0110 	add.w	r1, r7, #16
 8006096:	2300      	movs	r3, #0
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	f7fe fb3d 	bl	8004718 <xQueueGenericSendFromISR>
 800609e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3728      	adds	r7, #40	; 0x28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000e1c 	.word	0x20000e1c

080060b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <prvProcessExpiredTimer+0x7c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe f88b 	bl	80041e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d122      	bne.n	800611c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	18d1      	adds	r1, r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	6978      	ldr	r0, [r7, #20]
 80060e4:	f000 f8c8 	bl	8006278 <prvInsertTimerInActiveList>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d016      	beq.n	800611c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060ee:	2300      	movs	r3, #0
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	2100      	movs	r1, #0
 80060f8:	6978      	ldr	r0, [r7, #20]
 80060fa:	f7ff ff8b 	bl	8006014 <xTimerGenericCommand>
 80060fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60fb      	str	r3, [r7, #12]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	4798      	blx	r3
}
 8006124:	bf00      	nop
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000e14 	.word	0x20000e14

08006130 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4618      	mov	r0, r3
 800613e:	f000 f857 	bl	80061f0 <prvGetNextExpireTime>
 8006142:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4619      	mov	r1, r3
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f803 	bl	8006154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800614e:	f000 f8d5 	bl	80062fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006152:	e7f1      	b.n	8006138 <prvTimerTask+0x8>

08006154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800615e:	f7ff f937 	bl	80053d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f866 	bl	8006238 <prvSampleTimeNow>
 800616c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d130      	bne.n	80061d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <prvProcessTimerOrBlockTask+0x3c>
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	429a      	cmp	r2, r3
 8006180:	d806      	bhi.n	8006190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006182:	f7ff f933 	bl	80053ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff91 	bl	80060b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800618e:	e024      	b.n	80061da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <prvProcessTimerOrBlockTask+0x90>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <prvProcessTimerOrBlockTask+0x94>)
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f7fe fe83 	bl	8004ec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061ba:	f7ff f917 	bl	80053ec <xTaskResumeAll>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10a      	bne.n	80061da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <prvProcessTimerOrBlockTask+0x98>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
}
 80061d4:	e001      	b.n	80061da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061d6:	f7ff f909 	bl	80053ec <xTaskResumeAll>
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000e18 	.word	0x20000e18
 80061e8:	20000e1c 	.word	0x20000e1c
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <prvGetNextExpireTime+0x44>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bf0c      	ite	eq
 8006202:	2301      	moveq	r3, #1
 8006204:	2300      	movne	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d105      	bne.n	8006222 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <prvGetNextExpireTime+0x44>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e001      	b.n	8006226 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006226:	68fb      	ldr	r3, [r7, #12]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000e14 	.word	0x20000e14

08006238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006240:	f7ff f972 	bl	8005528 <xTaskGetTickCount>
 8006244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <prvSampleTimeNow+0x3c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	429a      	cmp	r2, r3
 800624e:	d205      	bcs.n	800625c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006250:	f000 f908 	bl	8006464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e002      	b.n	8006262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006262:	4a04      	ldr	r2, [pc, #16]	; (8006274 <prvSampleTimeNow+0x3c>)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006268:	68fb      	ldr	r3, [r7, #12]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000e24 	.word	0x20000e24

08006278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d812      	bhi.n	80062c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	1ad2      	subs	r2, r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	e01b      	b.n	80062ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062b2:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <prvInsertTimerInActiveList+0x7c>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fd ff59 	bl	8004174 <vListInsert>
 80062c2:	e012      	b.n	80062ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d206      	bcs.n	80062da <prvInsertTimerInActiveList+0x62>
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d302      	bcc.n	80062da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e007      	b.n	80062ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <prvInsertTimerInActiveList+0x80>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3304      	adds	r3, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	4610      	mov	r0, r2
 80062e6:	f7fd ff45 	bl	8004174 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062ea:	697b      	ldr	r3, [r7, #20]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000e18 	.word	0x20000e18
 80062f8:	20000e14 	.word	0x20000e14

080062fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006302:	e09d      	b.n	8006440 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	da18      	bge.n	800633c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	3304      	adds	r3, #4
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61fb      	str	r3, [r7, #28]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006332:	6850      	ldr	r0, [r2, #4]
 8006334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006336:	6892      	ldr	r2, [r2, #8]
 8006338:	4611      	mov	r1, r2
 800633a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	db7e      	blt.n	8006440 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	3304      	adds	r3, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7fd ff46 	bl	80041e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006358:	463b      	mov	r3, r7
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff ff6c 	bl	8006238 <prvSampleTimeNow>
 8006360:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b09      	cmp	r3, #9
 8006366:	d86a      	bhi.n	800643e <prvProcessReceivedCommands+0x142>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <prvProcessReceivedCommands+0x74>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006399 	.word	0x08006399
 8006374:	08006399 	.word	0x08006399
 8006378:	08006399 	.word	0x08006399
 800637c:	08006441 	.word	0x08006441
 8006380:	080063f5 	.word	0x080063f5
 8006384:	0800642d 	.word	0x0800642d
 8006388:	08006399 	.word	0x08006399
 800638c:	08006399 	.word	0x08006399
 8006390:	08006441 	.word	0x08006441
 8006394:	080063f5 	.word	0x080063f5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	18d1      	adds	r1, r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a6:	f7ff ff67 	bl	8006278 <prvInsertTimerInActiveList>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d047      	beq.n	8006440 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d13f      	bne.n	8006440 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	441a      	add	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	2300      	movs	r3, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d2:	f7ff fe1f 	bl	8006014 <xTimerGenericCommand>
 80063d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d130      	bne.n	8006440 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	61bb      	str	r3, [r7, #24]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	617b      	str	r3, [r7, #20]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	18d1      	adds	r1, r2, r3
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006426:	f7ff ff27 	bl	8006278 <prvInsertTimerInActiveList>
					break;
 800642a:	e009      	b.n	8006440 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006438:	f000 fb6c 	bl	8006b14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800643c:	e000      	b.n	8006440 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800643e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <prvProcessReceivedCommands+0x164>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	1d39      	adds	r1, r7, #4
 8006446:	2200      	movs	r2, #0
 8006448:	4618      	mov	r0, r3
 800644a:	f7fe f9fd 	bl	8004848 <xQueueReceive>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	f47f af57 	bne.w	8006304 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	3730      	adds	r7, #48	; 0x30
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000e1c 	.word	0x20000e1c

08006464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800646a:	e045      	b.n	80064f8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800646c:	4b2c      	ldr	r3, [pc, #176]	; (8006520 <prvSwitchTimerLists+0xbc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006476:	4b2a      	ldr	r3, [pc, #168]	; (8006520 <prvSwitchTimerLists+0xbc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3304      	adds	r3, #4
 8006484:	4618      	mov	r0, r3
 8006486:	f7fd fead 	bl	80041e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d12e      	bne.n	80064f8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d90e      	bls.n	80064ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <prvSwitchTimerLists+0xbc>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7fd fe56 	bl	8004174 <vListInsert>
 80064c8:	e016      	b.n	80064f8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ca:	2300      	movs	r3, #0
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	2300      	movs	r3, #0
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	2100      	movs	r1, #0
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff fd9d 	bl	8006014 <xTimerGenericCommand>
 80064da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	603b      	str	r3, [r7, #0]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064f8:	4b09      	ldr	r3, [pc, #36]	; (8006520 <prvSwitchTimerLists+0xbc>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1b4      	bne.n	800646c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <prvSwitchTimerLists+0xbc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006508:	4b06      	ldr	r3, [pc, #24]	; (8006524 <prvSwitchTimerLists+0xc0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <prvSwitchTimerLists+0xbc>)
 800650e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006510:	4a04      	ldr	r2, [pc, #16]	; (8006524 <prvSwitchTimerLists+0xc0>)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	6013      	str	r3, [r2, #0]
}
 8006516:	bf00      	nop
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000e14 	.word	0x20000e14
 8006524:	20000e18 	.word	0x20000e18

08006528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800652e:	f000 f92d 	bl	800678c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006532:	4b15      	ldr	r3, [pc, #84]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d120      	bne.n	800657c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800653a:	4814      	ldr	r0, [pc, #80]	; (800658c <prvCheckForValidListAndQueue+0x64>)
 800653c:	f7fd fdcc 	bl	80040d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006540:	4813      	ldr	r0, [pc, #76]	; (8006590 <prvCheckForValidListAndQueue+0x68>)
 8006542:	f7fd fdc9 	bl	80040d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <prvCheckForValidListAndQueue+0x6c>)
 8006548:	4a10      	ldr	r2, [pc, #64]	; (800658c <prvCheckForValidListAndQueue+0x64>)
 800654a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800654c:	4b12      	ldr	r3, [pc, #72]	; (8006598 <prvCheckForValidListAndQueue+0x70>)
 800654e:	4a10      	ldr	r2, [pc, #64]	; (8006590 <prvCheckForValidListAndQueue+0x68>)
 8006550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4b11      	ldr	r3, [pc, #68]	; (800659c <prvCheckForValidListAndQueue+0x74>)
 8006558:	4a11      	ldr	r2, [pc, #68]	; (80065a0 <prvCheckForValidListAndQueue+0x78>)
 800655a:	2110      	movs	r1, #16
 800655c:	200a      	movs	r0, #10
 800655e:	f7fd fed3 	bl	8004308 <xQueueGenericCreateStatic>
 8006562:	4603      	mov	r3, r0
 8006564:	4a08      	ldr	r2, [pc, #32]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 8006566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <prvCheckForValidListAndQueue+0x60>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	490b      	ldr	r1, [pc, #44]	; (80065a4 <prvCheckForValidListAndQueue+0x7c>)
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fc7a 	bl	8004e70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800657c:	f000 f936 	bl	80067ec <vPortExitCritical>
}
 8006580:	bf00      	nop
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000e1c 	.word	0x20000e1c
 800658c:	20000dec 	.word	0x20000dec
 8006590:	20000e00 	.word	0x20000e00
 8006594:	20000e14 	.word	0x20000e14
 8006598:	20000e18 	.word	0x20000e18
 800659c:	20000ec8 	.word	0x20000ec8
 80065a0:	20000e28 	.word	0x20000e28
 80065a4:	08006f70 	.word	0x08006f70

080065a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	3b04      	subs	r3, #4
 80065b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0201 	bic.w	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3b04      	subs	r3, #4
 80065d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d8:	4a08      	ldr	r2, [pc, #32]	; (80065fc <pxPortInitialiseStack+0x54>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b14      	subs	r3, #20
 80065e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b20      	subs	r3, #32
 80065ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065f0:	68fb      	ldr	r3, [r7, #12]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr
 80065fc:	08006601 	.word	0x08006601

08006600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <prvTaskExitError+0x54>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d00a      	beq.n	800662a <prvTaskExitError+0x2a>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60fb      	str	r3, [r7, #12]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <prvTaskExitError+0x28>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60bb      	str	r3, [r7, #8]
}
 800663c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800663e:	bf00      	nop
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0fc      	beq.n	8006640 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	bc80      	pop	{r7}
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000000c 	.word	0x2000000c
	...

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	f04e 0e0d 	orr.w	lr, lr, #13
 800667e:	4770      	bx	lr

08006680 <pxCurrentTCBConst2>:
 8006680:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006688:	4806      	ldr	r0, [pc, #24]	; (80066a4 <prvPortStartFirstTask+0x1c>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	b662      	cpsie	i
 8006694:	b661      	cpsie	f
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	df00      	svc	0
 80066a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066a2:	bf00      	nop
 80066a4:	e000ed08 	.word	0xe000ed08

080066a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066ae:	4b32      	ldr	r3, [pc, #200]	; (8006778 <xPortStartScheduler+0xd0>)
 80066b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4b2a      	ldr	r3, [pc, #168]	; (800677c <xPortStartScheduler+0xd4>)
 80066d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066d6:	4b2a      	ldr	r3, [pc, #168]	; (8006780 <xPortStartScheduler+0xd8>)
 80066d8:	2207      	movs	r2, #7
 80066da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066dc:	e009      	b.n	80066f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <xPortStartScheduler+0xd8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	4a26      	ldr	r2, [pc, #152]	; (8006780 <xPortStartScheduler+0xd8>)
 80066e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d0ef      	beq.n	80066de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066fe:	4b20      	ldr	r3, [pc, #128]	; (8006780 <xPortStartScheduler+0xd8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1c3 0307 	rsb	r3, r3, #7
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00a      	beq.n	8006720 <xPortStartScheduler+0x78>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006720:	4b17      	ldr	r3, [pc, #92]	; (8006780 <xPortStartScheduler+0xd8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	4a16      	ldr	r2, [pc, #88]	; (8006780 <xPortStartScheduler+0xd8>)
 8006728:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <xPortStartScheduler+0xd8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <xPortStartScheduler+0xd8>)
 8006734:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <xPortStartScheduler+0xdc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <xPortStartScheduler+0xdc>)
 8006744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006748:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800674a:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <xPortStartScheduler+0xdc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <xPortStartScheduler+0xdc>)
 8006750:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006754:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006756:	f000 f8b9 	bl	80068cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <xPortStartScheduler+0xe0>)
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006760:	f7ff ff92 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006764:	f7fe ffac 	bl	80056c0 <vTaskSwitchContext>
	prvTaskExitError();
 8006768:	f7ff ff4a 	bl	8006600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	e000e400 	.word	0xe000e400
 800677c:	20000f18 	.word	0x20000f18
 8006780:	20000f1c 	.word	0x20000f1c
 8006784:	e000ed20 	.word	0xe000ed20
 8006788:	2000000c 	.word	0x2000000c

0800678c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	607b      	str	r3, [r7, #4]
}
 80067a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <vPortEnterCritical+0x58>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3301      	adds	r3, #1
 80067ac:	4a0d      	ldr	r2, [pc, #52]	; (80067e4 <vPortEnterCritical+0x58>)
 80067ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067b0:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <vPortEnterCritical+0x58>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10f      	bne.n	80067d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <vPortEnterCritical+0x5c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	603b      	str	r3, [r7, #0]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vPortEnterCritical+0x4a>
	}
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000000c 	.word	0x2000000c
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <vPortExitCritical+0x4c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <vPortExitCritical+0x24>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <vPortExitCritical+0x4c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3b01      	subs	r3, #1
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <vPortExitCritical+0x4c>)
 8006818:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <vPortExitCritical+0x4c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <vPortExitCritical+0x42>
 8006822:	2300      	movs	r3, #0
 8006824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f383 8811 	msr	BASEPRI, r3
}
 800682c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr
 8006838:	2000000c 	.word	0x2000000c
 800683c:	00000000 	.word	0x00000000

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006850:	6010      	str	r0, [r2, #0]
 8006852:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006856:	f04f 0050 	mov.w	r0, #80	; 0x50
 800685a:	f380 8811 	msr	BASEPRI, r0
 800685e:	f7fe ff2f 	bl	80056c0 <vTaskSwitchContext>
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6808      	ldr	r0, [r1, #0]
 8006872:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006876:	f380 8809 	msr	PSP, r0
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	4770      	bx	lr

08006880 <pxCurrentTCBConst>:
 8006880:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop

08006888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068a2:	f7fe fe4f 	bl	8005544 <xTaskIncrementTick>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <xPortSysTickHandler+0x40>)
 80068ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	2300      	movs	r3, #0
 80068b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f383 8811 	msr	BASEPRI, r3
}
 80068be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vPortSetupTimerInterrupt+0x30>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068d6:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <vPortSetupTimerInterrupt+0x34>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <vPortSetupTimerInterrupt+0x38>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a09      	ldr	r2, [pc, #36]	; (8006908 <vPortSetupTimerInterrupt+0x3c>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <vPortSetupTimerInterrupt+0x40>)
 80068ea:	3b01      	subs	r3, #1
 80068ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ee:	4b03      	ldr	r3, [pc, #12]	; (80068fc <vPortSetupTimerInterrupt+0x30>)
 80068f0:	2207      	movs	r2, #7
 80068f2:	601a      	str	r2, [r3, #0]
}
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	e000e010 	.word	0xe000e010
 8006900:	e000e018 	.word	0xe000e018
 8006904:	20000000 	.word	0x20000000
 8006908:	10624dd3 	.word	0x10624dd3
 800690c:	e000e014 	.word	0xe000e014

08006910 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d914      	bls.n	800694c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006922:	4a16      	ldr	r2, [pc, #88]	; (800697c <vPortValidateInterruptPriority+0x6c>)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <vPortValidateInterruptPriority+0x70>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	7afa      	ldrb	r2, [r7, #11]
 8006932:	429a      	cmp	r2, r3
 8006934:	d20a      	bcs.n	800694c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	607b      	str	r3, [r7, #4]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <vPortValidateInterruptPriority+0x74>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <vPortValidateInterruptPriority+0x78>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d90a      	bls.n	8006972 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	603b      	str	r3, [r7, #0]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <vPortValidateInterruptPriority+0x60>
	}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	e000e3f0 	.word	0xe000e3f0
 8006980:	20000f18 	.word	0x20000f18
 8006984:	e000ed0c 	.word	0xe000ed0c
 8006988:	20000f1c 	.word	0x20000f1c

0800698c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006998:	f7fe fd1a 	bl	80053d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800699c:	4b58      	ldr	r3, [pc, #352]	; (8006b00 <pvPortMalloc+0x174>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069a4:	f000 f910 	bl	8006bc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069a8:	4b56      	ldr	r3, [pc, #344]	; (8006b04 <pvPortMalloc+0x178>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 808e 	bne.w	8006ad2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01d      	beq.n	80069f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069bc:	2208      	movs	r2, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d014      	beq.n	80069f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	3308      	adds	r3, #8
 80069d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <pvPortMalloc+0x6c>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617b      	str	r3, [r7, #20]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d069      	beq.n	8006ad2 <pvPortMalloc+0x146>
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <pvPortMalloc+0x17c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d864      	bhi.n	8006ad2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a08:	4b40      	ldr	r3, [pc, #256]	; (8006b0c <pvPortMalloc+0x180>)
 8006a0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a0c:	4b3f      	ldr	r3, [pc, #252]	; (8006b0c <pvPortMalloc+0x180>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a12:	e004      	b.n	8006a1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <pvPortMalloc+0xa4>
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f1      	bne.n	8006a14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a30:	4b33      	ldr	r3, [pc, #204]	; (8006b00 <pvPortMalloc+0x174>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d04b      	beq.n	8006ad2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2208      	movs	r2, #8
 8006a40:	4413      	add	r3, r2
 8006a42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	2308      	movs	r3, #8
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d91f      	bls.n	8006a9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <pvPortMalloc+0xf8>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	613b      	str	r3, [r7, #16]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	1ad2      	subs	r2, r2, r3
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a96:	69b8      	ldr	r0, [r7, #24]
 8006a98:	f000 f8f8 	bl	8006c8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <pvPortMalloc+0x17c>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <pvPortMalloc+0x17c>)
 8006aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aaa:	4b17      	ldr	r3, [pc, #92]	; (8006b08 <pvPortMalloc+0x17c>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <pvPortMalloc+0x184>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d203      	bcs.n	8006abe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <pvPortMalloc+0x17c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <pvPortMalloc+0x184>)
 8006abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <pvPortMalloc+0x178>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ad2:	f7fe fc8b 	bl	80053ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <pvPortMalloc+0x16a>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	60fb      	str	r3, [r7, #12]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <pvPortMalloc+0x168>
	return pvReturn;
 8006af6:	69fb      	ldr	r3, [r7, #28]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20001b28 	.word	0x20001b28
 8006b04:	20001b34 	.word	0x20001b34
 8006b08:	20001b2c 	.word	0x20001b2c
 8006b0c:	20001b20 	.word	0x20001b20
 8006b10:	20001b30 	.word	0x20001b30

08006b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d048      	beq.n	8006bb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b26:	2308      	movs	r3, #8
 8006b28:	425b      	negs	r3, r3
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	4b21      	ldr	r3, [pc, #132]	; (8006bc0 <vPortFree+0xac>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <vPortFree+0x44>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60fb      	str	r3, [r7, #12]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <vPortFree+0x62>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60bb      	str	r3, [r7, #8]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <vPortFree+0xac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d019      	beq.n	8006bb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d115      	bne.n	8006bb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortFree+0xac>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	43db      	mvns	r3, r3
 8006b96:	401a      	ands	r2, r3
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b9c:	f7fe fc18 	bl	80053d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <vPortFree+0xb0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4413      	add	r3, r2
 8006baa:	4a06      	ldr	r2, [pc, #24]	; (8006bc4 <vPortFree+0xb0>)
 8006bac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bae:	6938      	ldr	r0, [r7, #16]
 8006bb0:	f000 f86c 	bl	8006c8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bb4:	f7fe fc1a 	bl	80053ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bb8:	bf00      	nop
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20001b34 	.word	0x20001b34
 8006bc4:	20001b2c 	.word	0x20001b2c

08006bc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bd4:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <prvHeapInit+0xac>)
 8006bd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3307      	adds	r3, #7
 8006be6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <prvHeapInit+0xac>)
 8006bf8:	4413      	add	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <prvHeapInit+0xb0>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c06:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <prvHeapInit+0xb0>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c14:	2208      	movs	r2, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <prvHeapInit+0xb4>)
 8006c28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <prvHeapInit+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <prvHeapInit+0xb4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <prvHeapInit+0xb4>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <prvHeapInit+0xb8>)
 8006c56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <prvHeapInit+0xbc>)
 8006c5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c60:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <prvHeapInit+0xc0>)
 8006c62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c66:	601a      	str	r2, [r3, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	20000f20 	.word	0x20000f20
 8006c78:	20001b20 	.word	0x20001b20
 8006c7c:	20001b28 	.word	0x20001b28
 8006c80:	20001b30 	.word	0x20001b30
 8006c84:	20001b2c 	.word	0x20001b2c
 8006c88:	20001b34 	.word	0x20001b34

08006c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <prvInsertBlockIntoFreeList+0xa8>)
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e002      	b.n	8006ca0 <prvInsertBlockIntoFreeList+0x14>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d8f7      	bhi.n	8006c9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d108      	bne.n	8006cce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	441a      	add	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d118      	bne.n	8006d14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <prvInsertBlockIntoFreeList+0xac>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d00d      	beq.n	8006d0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e008      	b.n	8006d1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <prvInsertBlockIntoFreeList+0xac>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e003      	b.n	8006d1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d002      	beq.n	8006d2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr
 8006d34:	20001b20 	.word	0x20001b20
 8006d38:	20001b28 	.word	0x20001b28

08006d3c <memset>:
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4402      	add	r2, r0
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d100      	bne.n	8006d46 <memset+0xa>
 8006d44:	4770      	bx	lr
 8006d46:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4a:	e7f9      	b.n	8006d40 <memset+0x4>

08006d4c <_reclaim_reent>:
 8006d4c:	4b29      	ldr	r3, [pc, #164]	; (8006df4 <_reclaim_reent+0xa8>)
 8006d4e:	b570      	push	{r4, r5, r6, lr}
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4604      	mov	r4, r0
 8006d54:	4283      	cmp	r3, r0
 8006d56:	d04b      	beq.n	8006df0 <_reclaim_reent+0xa4>
 8006d58:	69c3      	ldr	r3, [r0, #28]
 8006d5a:	b143      	cbz	r3, 8006d6e <_reclaim_reent+0x22>
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d144      	bne.n	8006dec <_reclaim_reent+0xa0>
 8006d62:	69e3      	ldr	r3, [r4, #28]
 8006d64:	6819      	ldr	r1, [r3, #0]
 8006d66:	b111      	cbz	r1, 8006d6e <_reclaim_reent+0x22>
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f879 	bl	8006e60 <_free_r>
 8006d6e:	6961      	ldr	r1, [r4, #20]
 8006d70:	b111      	cbz	r1, 8006d78 <_reclaim_reent+0x2c>
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f874 	bl	8006e60 <_free_r>
 8006d78:	69e1      	ldr	r1, [r4, #28]
 8006d7a:	b111      	cbz	r1, 8006d82 <_reclaim_reent+0x36>
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 f86f 	bl	8006e60 <_free_r>
 8006d82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d84:	b111      	cbz	r1, 8006d8c <_reclaim_reent+0x40>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 f86a 	bl	8006e60 <_free_r>
 8006d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8e:	b111      	cbz	r1, 8006d96 <_reclaim_reent+0x4a>
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 f865 	bl	8006e60 <_free_r>
 8006d96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d98:	b111      	cbz	r1, 8006da0 <_reclaim_reent+0x54>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f860 	bl	8006e60 <_free_r>
 8006da0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006da2:	b111      	cbz	r1, 8006daa <_reclaim_reent+0x5e>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 f85b 	bl	8006e60 <_free_r>
 8006daa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006dac:	b111      	cbz	r1, 8006db4 <_reclaim_reent+0x68>
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f856 	bl	8006e60 <_free_r>
 8006db4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006db6:	b111      	cbz	r1, 8006dbe <_reclaim_reent+0x72>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f851 	bl	8006e60 <_free_r>
 8006dbe:	6a23      	ldr	r3, [r4, #32]
 8006dc0:	b1b3      	cbz	r3, 8006df0 <_reclaim_reent+0xa4>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dc8:	4718      	bx	r3
 8006dca:	5949      	ldr	r1, [r1, r5]
 8006dcc:	b941      	cbnz	r1, 8006de0 <_reclaim_reent+0x94>
 8006dce:	3504      	adds	r5, #4
 8006dd0:	69e3      	ldr	r3, [r4, #28]
 8006dd2:	2d80      	cmp	r5, #128	; 0x80
 8006dd4:	68d9      	ldr	r1, [r3, #12]
 8006dd6:	d1f8      	bne.n	8006dca <_reclaim_reent+0x7e>
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 f841 	bl	8006e60 <_free_r>
 8006dde:	e7c0      	b.n	8006d62 <_reclaim_reent+0x16>
 8006de0:	680e      	ldr	r6, [r1, #0]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 f83c 	bl	8006e60 <_free_r>
 8006de8:	4631      	mov	r1, r6
 8006dea:	e7ef      	b.n	8006dcc <_reclaim_reent+0x80>
 8006dec:	2500      	movs	r5, #0
 8006dee:	e7ef      	b.n	8006dd0 <_reclaim_reent+0x84>
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	bf00      	nop
 8006df4:	2000005c 	.word	0x2000005c

08006df8 <__libc_init_array>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	4d0c      	ldr	r5, [pc, #48]	; (8006e30 <__libc_init_array+0x38>)
 8006dfe:	4c0d      	ldr	r4, [pc, #52]	; (8006e34 <__libc_init_array+0x3c>)
 8006e00:	1b64      	subs	r4, r4, r5
 8006e02:	10a4      	asrs	r4, r4, #2
 8006e04:	42a6      	cmp	r6, r4
 8006e06:	d109      	bne.n	8006e1c <__libc_init_array+0x24>
 8006e08:	f000 f87e 	bl	8006f08 <_init>
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	4d0a      	ldr	r5, [pc, #40]	; (8006e38 <__libc_init_array+0x40>)
 8006e10:	4c0a      	ldr	r4, [pc, #40]	; (8006e3c <__libc_init_array+0x44>)
 8006e12:	1b64      	subs	r4, r4, r5
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	42a6      	cmp	r6, r4
 8006e18:	d105      	bne.n	8006e26 <__libc_init_array+0x2e>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e20:	4798      	blx	r3
 8006e22:	3601      	adds	r6, #1
 8006e24:	e7ee      	b.n	8006e04 <__libc_init_array+0xc>
 8006e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2a:	4798      	blx	r3
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	e7f2      	b.n	8006e16 <__libc_init_array+0x1e>
 8006e30:	08006fc0 	.word	0x08006fc0
 8006e34:	08006fc0 	.word	0x08006fc0
 8006e38:	08006fc0 	.word	0x08006fc0
 8006e3c:	08006fc4 	.word	0x08006fc4

08006e40 <__retarget_lock_acquire_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <__retarget_lock_release_recursive>:
 8006e42:	4770      	bx	lr

08006e44 <memcpy>:
 8006e44:	440a      	add	r2, r1
 8006e46:	4291      	cmp	r1, r2
 8006e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e4c:	d100      	bne.n	8006e50 <memcpy+0xc>
 8006e4e:	4770      	bx	lr
 8006e50:	b510      	push	{r4, lr}
 8006e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e56:	4291      	cmp	r1, r2
 8006e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e5c:	d1f9      	bne.n	8006e52 <memcpy+0xe>
 8006e5e:	bd10      	pop	{r4, pc}

08006e60 <_free_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4605      	mov	r5, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d040      	beq.n	8006eea <_free_r+0x8a>
 8006e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6c:	1f0c      	subs	r4, r1, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfb8      	it	lt
 8006e72:	18e4      	addlt	r4, r4, r3
 8006e74:	f000 f83c 	bl	8006ef0 <__malloc_lock>
 8006e78:	4a1c      	ldr	r2, [pc, #112]	; (8006eec <_free_r+0x8c>)
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	b933      	cbnz	r3, 8006e8c <_free_r+0x2c>
 8006e7e:	6063      	str	r3, [r4, #4]
 8006e80:	6014      	str	r4, [r2, #0]
 8006e82:	4628      	mov	r0, r5
 8006e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e88:	f000 b838 	b.w	8006efc <__malloc_unlock>
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d908      	bls.n	8006ea2 <_free_r+0x42>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	1821      	adds	r1, r4, r0
 8006e94:	428b      	cmp	r3, r1
 8006e96:	bf01      	itttt	eq
 8006e98:	6819      	ldreq	r1, [r3, #0]
 8006e9a:	685b      	ldreq	r3, [r3, #4]
 8006e9c:	1809      	addeq	r1, r1, r0
 8006e9e:	6021      	streq	r1, [r4, #0]
 8006ea0:	e7ed      	b.n	8006e7e <_free_r+0x1e>
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	b10b      	cbz	r3, 8006eac <_free_r+0x4c>
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	d9fa      	bls.n	8006ea2 <_free_r+0x42>
 8006eac:	6811      	ldr	r1, [r2, #0]
 8006eae:	1850      	adds	r0, r2, r1
 8006eb0:	42a0      	cmp	r0, r4
 8006eb2:	d10b      	bne.n	8006ecc <_free_r+0x6c>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	1850      	adds	r0, r2, r1
 8006eba:	4283      	cmp	r3, r0
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	d1e0      	bne.n	8006e82 <_free_r+0x22>
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4408      	add	r0, r1
 8006ec6:	6010      	str	r0, [r2, #0]
 8006ec8:	6053      	str	r3, [r2, #4]
 8006eca:	e7da      	b.n	8006e82 <_free_r+0x22>
 8006ecc:	d902      	bls.n	8006ed4 <_free_r+0x74>
 8006ece:	230c      	movs	r3, #12
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	e7d6      	b.n	8006e82 <_free_r+0x22>
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	1821      	adds	r1, r4, r0
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf01      	itttt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	1809      	addeq	r1, r1, r0
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	6054      	str	r4, [r2, #4]
 8006ee8:	e7cb      	b.n	8006e82 <_free_r+0x22>
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	20001c74 	.word	0x20001c74

08006ef0 <__malloc_lock>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__malloc_lock+0x8>)
 8006ef2:	f7ff bfa5 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	20001c70 	.word	0x20001c70

08006efc <__malloc_unlock>:
 8006efc:	4801      	ldr	r0, [pc, #4]	; (8006f04 <__malloc_unlock+0x8>)
 8006efe:	f7ff bfa0 	b.w	8006e42 <__retarget_lock_release_recursive>
 8006f02:	bf00      	nop
 8006f04:	20001c70 	.word	0x20001c70

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
